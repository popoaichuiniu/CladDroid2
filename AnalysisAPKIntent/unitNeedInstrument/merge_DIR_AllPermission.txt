android.permission.USE_SIP
android.permission.SEND_SMS
android.permission.DISABLE_KEYGUARD
android.permission.BLUETOOTH_ADMIN
android.permission.CHANGE_WIFI_MULTICAST_STATE
android.permission.RECEIVE_BOOT_COMPLETED
android.permission.SET_WALLPAPER_HINTS
android.permission.BROADCAST_STICKY
android.permission.ACCESS_FINE_LOCATION
android.permission.KILL_BACKGROUND_PROCESSES
android.permission.ACCESS_COARSE_LOCATION
android.permission.CHANGE_WIFI_STATE
android.permission.ACCESS_NETWORK_STATE
android.permission.GET_TASKS
android.permission.WAKE_LOCK
android.permission.CHANGE_NETWORK_STATE
android.permission.ACCESS_WIFI_STATE
android.permission.MODIFY_AUDIO_SETTINGS
android.permission.SET_WALLPAPER
android.permission.BLUETOOTH
android.permission.READ_EXTERNAL_STORAGE
android.permission.READ_PHONE_STATE



android.permission.USE_SIP:
<com.android.server.sip.SipService: getListOfProfiles(Ljava/lang/String;)[Landroid/net/sip/SipProfile;>
<com.android.server.sip.SipService: createSession(Landroid/net/sip/SipProfile;Landroid/net/sip/ISipSessionListener;Ljava/lang/String;)Landroid/net/sip/ISipSession;>
<com.android.server.sip.SipService: isOpened(Ljava/lang/String;Ljava/lang/String;)Z>
<com.android.server.sip.SipService: setRegistrationListener(Ljava/lang/String;Landroid/net/sip/ISipSessionListener;Ljava/lang/String;)V>
<com.android.server.sip.SipService: close(Ljava/lang/String;Ljava/lang/String;)V>
<android.net.sip.SipManager: setRegistrationListener(Ljava/lang/String;Landroid/net/sip/SipRegistrationListener;)V>
<android.net.sip.SipManager: open(Landroid/net/sip/SipProfile;)V>
<com.android.server.sip.SipService: getPendingSession(Ljava/lang/String;Ljava/lang/String;)Landroid/net/sip/ISipSession;>
<android.net.sip.SipManager: createSipSession(Landroid/net/sip/SipProfile;Landroid/net/sip/SipSession$Listener;)Landroid/net/sip/SipSession;>
<android.net.sip.SipManager: register(Landroid/net/sip/SipProfile;ILandroid/net/sip/SipRegistrationListener;)V>
<android.net.sip.SipManager: takeAudioCall(Landroid/content/Intent;Landroid/net/sip/SipAudioCall$Listener;)Landroid/net/sip/SipAudioCall;>
<android.net.sip.SipManager: open(Landroid/net/sip/SipProfile;Landroid/app/PendingIntent;Landroid/net/sip/SipRegistrationListener;)V>
<android.net.sip.SipManager: makeAudioCall(Ljava/lang/String;Ljava/lang/String;Landroid/net/sip/SipAudioCall$Listener;I)Landroid/net/sip/SipAudioCall;>
<android.net.sip.SipManager: close(Ljava/lang/String;)V>
<com.android.server.sip.SipService: isRegistered(Ljava/lang/String;Ljava/lang/String;)Z>
<com.android.server.sip.SipService: open3(Landroid/net/sip/SipProfile;Landroid/app/PendingIntent;Landroid/net/sip/ISipSessionListener;Ljava/lang/String;)V>
<android.net.sip.SipManager: getSessionFor(Landroid/content/Intent;)Landroid/net/sip/SipSession;>
<android.net.sip.SipManager: isRegistered(Ljava/lang/String;)Z>
<android.net.sip.SipManager: isOpened(Ljava/lang/String;)Z>
<android.net.sip.SipManager: unregister(Landroid/net/sip/SipProfile;Landroid/net/sip/SipRegistrationListener;)V>
<android.net.sip.SipManager: makeAudioCall(Landroid/net/sip/SipProfile;Landroid/net/sip/SipProfile;Landroid/net/sip/SipAudioCall$Listener;I)Landroid/net/sip/SipAudioCall;>
<com.android.server.sip.SipService: open(Landroid/net/sip/SipProfile;Ljava/lang/String;)V>

android.permission.SEND_SMS:
<com.android.internal.telephony.UiccSmsController: sendDataForSubscriberWithSelfPermissions(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;I[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;)V>
<com.android.internal.telephony.UiccSmsController: sendStoredMultipartText(ILjava/lang/String;Landroid/net/Uri;Ljava/lang/String;Ljava/util/List;Ljava/util/List;)V>
<com.android.internal.telephony.UiccSmsController: sendStoredText(ILjava/lang/String;Landroid/net/Uri;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;)V>
<com.android.server.MmsServiceBroker$BinderService: sendMessage(ILjava/lang/String;Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;Landroid/app/PendingIntent;)V>
<com.android.internal.telephony.UiccSmsController: sendTextForSubscriberWithSelfPermissions(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;Z)V>
<android.telephony.SmsManager: sendDataMessage(Ljava/lang/String;Ljava/lang/String;S[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;)V>
<android.telephony.SmsManager: sendMultipartTextMessage(Ljava/lang/String;Ljava/lang/String;Ljava/util/ArrayList;Ljava/util/ArrayList;Ljava/util/ArrayList;)V>
<android.telephony.gsm.SmsManager: sendTextMessage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;)V>
<android.telephony.gsm.SmsManager: sendDataMessage(Ljava/lang/String;Ljava/lang/String;S[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;)V>
<com.android.internal.telephony.UiccSmsController: sendTextForSubscriber(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;Z)V>
<android.telephony.gsm.SmsManager: sendMultipartTextMessage(Ljava/lang/String;Ljava/lang/String;Ljava/util/ArrayList;Ljava/util/ArrayList;Ljava/util/ArrayList;)V>
<android.telephony.SmsManager: sendMultimediaMessage(Landroid/content/Context;Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;Landroid/app/PendingIntent;)V>
<com.android.internal.telephony.UiccSmsController: sendMultipartTextForSubscriber(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/util/List;Ljava/util/List;Z)V>
<android.telephony.SmsManager: sendTextMessage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;)V>
<com.android.internal.telephony.UiccSmsController: updateMessageOnIccEfForSubscriber(ILjava/lang/String;II[B)Z>
<com.android.internal.telephony.UiccSmsController: copyMessageToIccEfForSubscriber(ILjava/lang/String;I[B[B)Z>
<com.android.internal.telephony.UiccSmsController: sendDataForSubscriber(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;I[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;)V>

android.permission.DISABLE_KEYGUARD:
<com.android.server.wm.WindowManagerService: keyguardGoingAway(I)V>
<android.app.KeyguardManager$KeyguardLock: reenableKeyguard()V>
<android.app.KeyguardManager$KeyguardLock: disableKeyguard()V>
<android.app.KeyguardManager: exitKeyguardSecurely(Landroid/app/KeyguardManager$OnKeyguardExitResult;)V>
<com.android.server.wm.WindowManagerService: reenableKeyguard(Landroid/os/IBinder;)V>
<com.android.server.wm.WindowManagerService: exitKeyguardSecurely(Landroid/view/IOnKeyguardExitResult;)V>
<com.android.server.wm.WindowManagerService: dismissKeyguard()V>
<com.android.server.wm.WindowManagerService: disableKeyguard(Landroid/os/IBinder;Ljava/lang/String;)V>

android.permission.BLUETOOTH_ADMIN:
<com.android.bluetooth.pbapclient.PbapClientService$BluetoothPbapClientBinder: disconnect(Landroid/bluetooth/BluetoothDevice;)Z>
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: getPriority(Landroid/bluetooth/BluetoothDevice;)I>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: startDiscovery()Z>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: setName(Ljava/lang/String;)Z>
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: getProtocolMode(Landroid/bluetooth/BluetoothDevice;)Z>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: createBondOutOfBand(Landroid/bluetooth/BluetoothDevice;ILandroid/bluetooth/OobData;)Z>
<android.bluetooth.BluetoothHeadset: sendVendorSpecificResultCode(Landroid/bluetooth/BluetoothDevice;Ljava/lang/String;Ljava/lang/String;)Z>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: setPin(Landroid/bluetooth/BluetoothDevice;ZI[B)Z>
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: connectAudio()Z>
<android.bluetooth.BluetoothAdapter: startDiscovery()Z>
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: setPriority(Landroid/bluetooth/BluetoothDevice;I)Z>
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: disconnect(Landroid/bluetooth/BluetoothDevice;)Z>
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: getReport(Landroid/bluetooth/BluetoothDevice;BBI)Z>
<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: explicitCallTransfer(Landroid/bluetooth/BluetoothDevice;)Z>
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: enableWBS()Z>
<com.android.bluetooth.pbapclient.PbapClientService$BluetoothPbapClientBinder: getPriority(Landroid/bluetooth/BluetoothDevice;)I>
<android.bluetooth.le.BluetoothLeScanner: stopScan(Landroid/bluetooth/le/ScanCallback;)V>
<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: setPriority(Landroid/bluetooth/BluetoothDevice;I)Z>
<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: getPriority(Landroid/bluetooth/BluetoothDevice;)I>
<android.bluetooth.le.BluetoothLeAdvertiser: stopAdvertising(Landroid/bluetooth/le/AdvertiseCallback;)V>
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: startMultiAdvertising(ILandroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/AdvertiseSettings;)V>
<android.bluetooth.BluetoothAdapter: cancelDiscovery()Z>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: createBond(Landroid/bluetooth/BluetoothDevice;I)Z>
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: stopMultiAdvertising(I)V>
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: setReport(Landroid/bluetooth/BluetoothDevice;BLjava/lang/String;)Z>
<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: disconnectAudio()Z>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: disable()Z>
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: bindResponse(IZ)V>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: enable()Z>
<com.android.server.BluetoothManagerService: enable()Z>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: cancelBondProcess(Landroid/bluetooth/BluetoothDevice;)Z>
<android.bluetooth.BluetoothDevice: createBond()Z>
<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: connect(Landroid/bluetooth/BluetoothDevice;)Z>
<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: terminateCall(Landroid/bluetooth/BluetoothDevice;I)Z>
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: getPriority(Landroid/bluetooth/BluetoothDevice;)I>
<com.android.bluetooth.a2dpsink.A2dpSinkService$BluetoothA2dpSinkBinder: connect(Landroid/bluetooth/BluetoothDevice;)Z>
<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: enterPrivateMode(Landroid/bluetooth/BluetoothDevice;I)Z>
<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: getLastVoiceTagNumber(Landroid/bluetooth/BluetoothDevice;)Z>
<android.bluetooth.BluetoothAdapter: stopLeScan(Landroid/bluetooth/BluetoothAdapter$LeScanCallback;)V>
<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: startVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z>
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: stopVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z>
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: disconnectAudio()Z>
<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: disconnect(Landroid/bluetooth/BluetoothDevice;)Z>
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: setPriority(Landroid/bluetooth/BluetoothDevice;I)Z>
<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: rejectCall(Landroid/bluetooth/BluetoothDevice;)Z>
<com.android.bluetooth.pbapclient.PbapClientService$BluetoothPbapClientBinder: connect(Landroid/bluetooth/BluetoothDevice;)Z>
<android.bluetooth.BluetoothHeadset: startVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z>
<android.bluetooth.BluetoothAdapter: disable()Z>
<com.android.bluetooth.a2dpsink.A2dpSinkService$BluetoothA2dpSinkBinder: disconnect(Landroid/bluetooth/BluetoothDevice;)Z>
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: setBluetoothTethering(Z)V>
<com.android.server.BluetoothManagerService: disable(Z)Z>
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: startVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z>
<com.android.bluetooth.a2dpsink.A2dpSinkService$BluetoothA2dpSinkBinder: setPriority(Landroid/bluetooth/BluetoothDevice;I)Z>
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: phoneStateChanged(IIILjava/lang/String;I)V>
<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: acceptCall(Landroid/bluetooth/BluetoothDevice;I)Z>
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: sendVendorSpecificResultCode(Landroid/bluetooth/BluetoothDevice;Ljava/lang/String;Ljava/lang/String;)Z>
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: disconnect(Landroid/bluetooth/BluetoothDevice;)Z>
<com.android.bluetooth.a2dpsink.A2dpSinkService$BluetoothA2dpSinkBinder: getPriority(Landroid/bluetooth/BluetoothDevice;)I>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: cancelDiscovery()Z>
<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: dialMemory(Landroid/bluetooth/BluetoothDevice;I)Z>
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: virtualUnplug(Landroid/bluetooth/BluetoothDevice;)Z>
<com.android.bluetooth.pbapclient.PbapClientService$BluetoothPbapClientBinder: setPriority(Landroid/bluetooth/BluetoothDevice;I)Z>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: factoryReset()Z>
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: stopScan(IZ)V>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: enableNoAutoConnect()Z>
<android.bluetooth.BluetoothDevice: setPin([B)Z>
<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: stopVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z>
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: connect(Landroid/bluetooth/BluetoothDevice;)Z>
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: clccResponse(IIIIZLjava/lang/String;I)V>
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: getPriority(Landroid/bluetooth/BluetoothDevice;)I>
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: setPriority(Landroid/bluetooth/BluetoothDevice;I)Z>
<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: holdCall(Landroid/bluetooth/BluetoothDevice;)Z>
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: connect(Landroid/bluetooth/BluetoothDevice;)Z>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: removeBond(Landroid/bluetooth/BluetoothDevice;)Z>
<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: dial(Landroid/bluetooth/BluetoothDevice;Ljava/lang/String;)Z>
<android.bluetooth.BluetoothAdapter: setName(Ljava/lang/String;)Z>
<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: redial(Landroid/bluetooth/BluetoothDevice;)Z>
<android.bluetooth.BluetoothAdapter: enable()Z>
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: setProtocolMode(Landroid/bluetooth/BluetoothDevice;I)Z>
<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: connectAudio()Z>
<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: sendDTMF(Landroid/bluetooth/BluetoothDevice;B)Z>
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: connect(Landroid/bluetooth/BluetoothDevice;)Z>
<com.android.server.BluetoothManagerService: enableNoAutoConnect()Z>
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: startScan(IZLandroid/bluetooth/le/ScanSettings;Ljava/util/List;Landroid/os/WorkSource;Ljava/util/List;Ljava/lang/String;)V>
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: disconnect(Landroid/bluetooth/BluetoothDevice;)Z>
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: disableWBS()Z>
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: sendData(Landroid/bluetooth/BluetoothDevice;Ljava/lang/String;)Z>
<android.bluetooth.BluetoothHeadset: stopVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z>

android.permission.CHANGE_WIFI_MULTICAST_STATE:
<android.net.wifi.WifiManager$MulticastLock: release()V>
<com.android.server.wifi.WifiServiceImpl: initializeMulticastFiltering()V>
<com.android.server.wifi.WifiServiceImpl: releaseMulticastLock()V>
<android.net.wifi.WifiManager$MulticastLock: acquire()V>
<com.android.server.wifi.WifiServiceImpl: acquireMulticastLock(Landroid/os/IBinder;Ljava/lang/String;)V>

android.permission.RECEIVE_BOOT_COMPLETED:
<com.android.server.job.JobSchedulerService$JobSchedulerStub: schedule(Landroid/app/job/JobInfo;)I>
<android.app.backup.BackupManager: dataChanged(Ljava/lang/String;)V>
<android.app.backup.BackupManager: dataChanged()V>
<android.app.JobSchedulerImpl: schedule(Landroid/app/job/JobInfo;)I>

android.permission.SET_WALLPAPER_HINTS:
<com.android.server.wallpaper.WallpaperManagerService: setDisplayPadding(Landroid/graphics/Rect;Ljava/lang/String;)V>
<android.app.WallpaperManager: suggestDesiredDimensions(II)V>
<com.android.server.wallpaper.WallpaperManagerService: setDimensionHints(IILjava/lang/String;)V>

android.permission.BROADCAST_STICKY:
<android.content.MutableContextWrapper: removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V>
<android.content.ContextWrapper: removeStickyBroadcast(Landroid/content/Intent;)V>
<android.content.MutableContextWrapper: stopService(Landroid/content/Intent;)Z>
<android.media.browse.MediaBrowser: disconnect()V>
<android.app.Service: stopSelfResult(I)Z>
<android.test.mock.MockApplication: stopService(Landroid/content/Intent;)Z>
<com.android.server.am.ActivityManagerService: stopService(Landroid/app/IApplicationThread;Landroid/content/Intent;Ljava/lang/String;I)I>
<android.speech.tts.TextToSpeech: setLanguage(Ljava/util/Locale;)I>
<android.speech.tts.TextToSpeech: playSilence(JILjava/util/HashMap;)I>
<android.service.quicksettings.TileService: unbindService(Landroid/content/ServiceConnection;)V>
<android.view.ContextThemeWrapper: removeStickyBroadcast(Landroid/content/Intent;)V>
<android.app.Application: unbindService(Landroid/content/ServiceConnection;)V>
<com.android.server.am.ActivityManagerService: moveTaskToFront(IILandroid/os/Bundle;)V>
<android.speech.tts.TextToSpeech: getVoices()Ljava/util/Set;>
<android.app.NativeActivity: removeStickyBroadcast(Landroid/content/Intent;)V>
<android.speech.tts.TextToSpeech: playSilentUtterance(JILjava/lang/String;)I>
<android.app.Service: stopSelf()V>
<android.speech.tts.TextToSpeech: setVoice(Landroid/speech/tts/Voice;)I>
<android.app.backup.BackupAgentHelper: stopService(Landroid/content/Intent;)Z>
<com.android.server.am.ActivityManagerService: startSystemLockTaskMode(I)V>
<android.test.RenamingDelegatingContext: removeStickyBroadcast(Landroid/content/Intent;)V>
<com.android.server.am.ActivityManagerService: bootAnimationComplete()V>
<android.content.MutableContextWrapper: unbindService(Landroid/content/ServiceConnection;)V>
<android.view.ContextThemeWrapper: stopService(Landroid/content/Intent;)Z>
<android.service.dreams.DreamService: dispatchTrackballEvent(Landroid/view/MotionEvent;)Z>
<android.app.ExpandableListActivity: stopService(Landroid/content/Intent;)Z>
<android.app.ListActivity: stopService(Landroid/content/Intent;)Z>
<android.service.dreams.DreamService: removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V>
<android.speech.tts.TextToSpeech: playEarcon(Ljava/lang/String;ILjava/util/HashMap;)I>
<android.service.voice.VoiceInteractionService: stopService(Landroid/content/Intent;)Z>
<android.service.dreams.DreamService: dispatchKeyShortcutEvent(Landroid/view/KeyEvent;)Z>
<android.test.IsolatedContext: removeStickyBroadcast(Landroid/content/Intent;)V>
<android.speech.tts.TextToSpeech: isSpeaking()Z>
<android.inputmethodservice.InputMethodService: unbindService(Landroid/content/ServiceConnection;)V>
<android.app.NativeActivity: stopService(Landroid/content/Intent;)Z>
<android.app.AliasActivity: stopService(Landroid/content/Intent;)Z>
<android.speech.tts.TextToSpeech: synthesizeToFile(Ljava/lang/CharSequence;Landroid/os/Bundle;Ljava/io/File;Ljava/lang/String;)I>
<android.accounts.AccountAuthenticatorActivity: removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V>
<android.app.TabActivity: removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V>
<android.speech.tts.TextToSpeech: getVoice()Landroid/speech/tts/Voice;>
<android.app.ActivityManager: moveTaskToFront(II)V>
<android.app.backup.BackupAgentHelper: unbindService(Landroid/content/ServiceConnection;)V>
<android.app.TabActivity: stopService(Landroid/content/Intent;)Z>
<com.android.server.am.ActivityManagerService: setFocusedTask(I)V>
<com.android.server.am.ActivityManagerService: stopLockTaskMode()V>
<android.security.KeyChain: getPrivateKey(Landroid/content/Context;Ljava/lang/String;)Ljava/security/PrivateKey;>
<android.service.quicksettings.TileService: removeStickyBroadcast(Landroid/content/Intent;)V>
<com.android.server.am.ActivityManagerService: removeTask(I)Z>
<android.net.VpnService: onRevoke()V>
<android.app.Activity: removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V>
<android.service.dreams.DreamService: removeStickyBroadcast(Landroid/content/Intent;)V>
<android.speech.tts.TextToSpeech: synthesizeToFile(Ljava/lang/String;Ljava/util/HashMap;Ljava/lang/String;)I>
<android.app.Activity: unbindService(Landroid/content/ServiceConnection;)V>
<com.android.server.am.ActivityManagerService: stopUser(IZLandroid/app/IStopUserCallback;)I>
<android.test.RenamingDelegatingContext: unbindService(Landroid/content/ServiceConnection;)V>
<android.app.TabActivity: removeStickyBroadcast(Landroid/content/Intent;)V>
<android.inputmethodservice.InputMethodService: removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V>
<com.android.server.am.ActivityManagerService: startActivityFromRecents(ILandroid/os/Bundle;)I>
<com.android.server.am.ActivityManagerService: getTaskBounds(I)Landroid/graphics/Rect;>
<com.android.server.am.ActivityManagerService: startUserInBackground(I)Z>
<android.speech.tts.TextToSpeech: isLanguageAvailable(Ljava/util/Locale;)I>
<android.service.voice.VoiceInteractionService: unbindService(Landroid/content/ServiceConnection;)V>
<android.media.MediaScannerConnection: disconnect()V>
<com.android.server.am.ActivityManagerService: isInHomeStack(I)Z>
<android.app.ActivityGroup: stopService(Landroid/content/Intent;)Z>
<android.test.mock.MockApplication: removeStickyBroadcast(Landroid/content/Intent;)V>
<android.test.IsolatedContext: removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V>
<android.view.ContextThemeWrapper: unbindService(Landroid/content/ServiceConnection;)V>
<android.accounts.AccountAuthenticatorActivity: stopService(Landroid/content/Intent;)Z>
<android.speech.tts.TextToSpeech: getFeatures(Ljava/util/Locale;)Ljava/util/Set;>
<android.speech.tts.TextToSpeech: playEarcon(Ljava/lang/String;ILandroid/os/Bundle;Ljava/lang/String;)I>
<android.test.mock.MockApplication: unbindService(Landroid/content/ServiceConnection;)V>
<android.test.IsolatedContext: unbindService(Landroid/content/ServiceConnection;)V>
<com.android.server.am.ActivityManagerService: stopSystemLockTaskMode()V>
<android.app.Application: removeStickyBroadcast(Landroid/content/Intent;)V>
<android.app.NativeActivity: unbindService(Landroid/content/ServiceConnection;)V>
<android.speech.tts.TextToSpeech: getDefaultVoice()Landroid/speech/tts/Voice;>
<android.speech.tts.TextToSpeech: stop()I>
<android.app.Activity: removeStickyBroadcast(Landroid/content/Intent;)V>
<android.service.dreams.DreamService: wakeUp()V>
<android.app.ExpandableListActivity: removeStickyBroadcast(Landroid/content/Intent;)V>
<android.app.backup.BackupAgentHelper: removeStickyBroadcast(Landroid/content/Intent;)V>
<android.app.AliasActivity: removeStickyBroadcast(Landroid/content/Intent;)V>
<com.android.server.am.ActivityManagerService: positionTaskInStack(III)V>
<android.content.ContextWrapper: removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V>
<android.app.ExpandableListActivity: removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V>
<android.inputmethodservice.InputMethodService: stopService(Landroid/content/Intent;)Z>
<com.android.server.am.PendingIntentRecord: send(ILandroid/content/Intent;Ljava/lang/String;Landroid/content/IIntentReceiver;Ljava/lang/String;Landroid/os/Bundle;)V>
<android.app.ActivityGroup: removeStickyBroadcast(Landroid/content/Intent;)V>
<android.test.RenamingDelegatingContext: stopService(Landroid/content/Intent;)Z>
<android.service.voice.VoiceInteractionService: removeStickyBroadcast(Landroid/content/Intent;)V>
<android.speech.tts.TextToSpeech: speak(Ljava/lang/String;ILjava/util/HashMap;)I>
<android.service.dreams.DreamService: onWakeUp()V>
<android.test.RenamingDelegatingContext: removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V>
<android.app.ListActivity: removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V>
<android.app.AliasActivity: removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V>
<android.view.ContextThemeWrapper: removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V>
<android.service.dreams.DreamService: dispatchKeyEvent(Landroid/view/KeyEvent;)Z>
<android.net.VpnService: stopService(Landroid/content/Intent;)Z>
<android.app.NativeActivity: removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V>
<android.app.ActivityManager: moveTaskToFront(IILandroid/os/Bundle;)V>
<android.service.quicksettings.TileService: stopService(Landroid/content/Intent;)Z>
<android.service.dreams.DreamService: stopService(Landroid/content/Intent;)Z>
<android.speech.SpeechRecognizer: destroy()V>
<com.android.server.am.ActivityManagerService: resizeTask(ILandroid/graphics/Rect;I)V>
<android.service.quicksettings.TileService: removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V>
<android.speech.tts.TextToSpeech: getLanguage()Ljava/util/Locale;>
<android.service.dreams.DreamService: finish()V>
<android.app.Activity: stopLockTask()V>
<android.test.mock.MockApplication: removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V>
<android.speech.tts.TextToSpeech: shutdown()V>
<com.android.server.am.ActivityManagerService: stopServiceToken(Landroid/content/ComponentName;Landroid/os/IBinder;I)Z>
<android.service.dreams.DreamService: dispatchTouchEvent(Landroid/view/MotionEvent;)Z>
<com.android.server.am.ActivityManagerService: unbroadcastIntent(Landroid/app/IApplicationThread;Landroid/content/Intent;I)V>
<android.net.VpnService: unbindService(Landroid/content/ServiceConnection;)V>
<android.app.AliasActivity: unbindService(Landroid/content/ServiceConnection;)V>
<android.bluetooth.BluetoothAdapter: closeProfileProxy(ILandroid/bluetooth/BluetoothProfile;)V>
<android.app.ExpandableListActivity: unbindService(Landroid/content/ServiceConnection;)V>
<com.android.server.am.ActivityManagerService: stopAppSwitches()V>
<android.speech.tts.TextToSpeech: getAvailableLanguages()Ljava/util/Set;>
<android.service.voice.VoiceInteractionService: removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V>
<com.android.server.am.ActivityManagerService: unbindService(Landroid/app/IServiceConnection;)Z>
<android.app.ListActivity: removeStickyBroadcast(Landroid/content/Intent;)V>
<android.app.Application: removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V>
<android.content.MutableContextWrapper: removeStickyBroadcast(Landroid/content/Intent;)V>
<com.android.server.am.ActivityManagerService: moveTaskToStack(IIZ)V>
<com.android.server.am.ActivityManagerService: moveTaskToDockedStack(IIZZLandroid/graphics/Rect;Z)Z>
<android.net.VpnService: removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V>
<com.android.server.am.ActivityManagerService: sendIdleJobTrigger()V>
<android.app.ActivityGroup: removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V>
<com.android.server.am.ActivityManagerService: swapDockedAndFullscreenStack()V>
<android.content.ContextWrapper: stopService(Landroid/content/Intent;)Z>
<android.net.VpnService: removeStickyBroadcast(Landroid/content/Intent;)V>
<android.content.ContextWrapper: unbindService(Landroid/content/ServiceConnection;)V>
<android.app.Application: stopService(Landroid/content/Intent;)Z>
<android.app.backup.BackupAgentHelper: removeStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V>
<com.android.server.am.ActivityManagerService: getTaskThumbnail(I)Landroid/app/ActivityManager$TaskThumbnail;>
<com.android.server.am.ActivityManagerService: bindService(Landroid/app/IApplicationThread;Landroid/os/IBinder;Landroid/content/Intent;Ljava/lang/String;Landroid/app/IServiceConnection;ILjava/lang/String;I)I>
<android.app.TabActivity: unbindService(Landroid/content/ServiceConnection;)V>
<android.bluetooth.BluetoothAdapter: getProfileProxy(Landroid/content/Context;Landroid/bluetooth/BluetoothProfile$ServiceListener;I)Z>
<android.test.IsolatedContext: stopService(Landroid/content/Intent;)Z>
<android.accounts.AccountAuthenticatorActivity: unbindService(Landroid/content/ServiceConnection;)V>
<android.app.ActivityGroup: unbindService(Landroid/content/ServiceConnection;)V>
<android.accounts.AccountAuthenticatorActivity: removeStickyBroadcast(Landroid/content/Intent;)V>
<android.speech.tts.TextToSpeech: getDefaultLanguage()Ljava/util/Locale;>
<android.app.Activity: stopService(Landroid/content/Intent;)Z>
<android.service.dreams.DreamService: dispatchGenericMotionEvent(Landroid/view/MotionEvent;)Z>
<com.android.server.am.ActivityManagerService: resizeDockedStack(Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;)V>
<android.app.ListActivity: unbindService(Landroid/content/ServiceConnection;)V>
<android.app.Service: stopSelf(I)V>
<com.android.server.am.ActivityManagerService: moveTasksToFullscreenStack(IZ)V>
<android.inputmethodservice.InputMethodService: removeStickyBroadcast(Landroid/content/Intent;)V>
<com.android.server.am.ActivityManagerService: removeStack(I)V>
<android.security.KeyChain: getCertificateChain(Landroid/content/Context;Ljava/lang/String;)[Ljava/security/cert/X509Certificate;>
<android.service.dreams.DreamService: unbindService(Landroid/content/ServiceConnection;)V>
<android.speech.tts.TextToSpeech: speak(Ljava/lang/CharSequence;ILandroid/os/Bundle;Ljava/lang/String;)I>

android.permission.ACCESS_FINE_LOCATION:
<android.location.LocationManager: addNmeaListener(Landroid/location/GpsStatus$NmeaListener;)Z>
<com.android.server.LocationManagerService: reportLocation(Landroid/location/Location;Z)V>
<android.location.LocationManager: requestLocationUpdates(Ljava/lang/String;JFLandroid/location/LocationListener;Landroid/os/Looper;)V>
<android.location.LocationManager: getProvider(Ljava/lang/String;)Landroid/location/LocationProvider;>
<android.location.LocationManager: requestLocationUpdates(JFLandroid/location/Criteria;Landroid/app/PendingIntent;)V>
<com.android.server.LocationManagerService: addGnssNavigationMessageListener(Landroid/location/IGnssNavigationMessageListener;Ljava/lang/String;)Z>
<android.location.LocationManager: addNmeaListener(Landroid/location/OnNmeaMessageListener;Landroid/os/Handler;)Z>
<android.location.LocationManager: requestLocationUpdates(Ljava/lang/String;JFLandroid/app/PendingIntent;)V>
<android.location.LocationManager: requestSingleUpdate(Ljava/lang/String;Landroid/location/LocationListener;Landroid/os/Looper;)V>
<android.location.LocationManager: sendExtraCommand(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Z>
<android.telephony.TelephonyManager: getNeighboringCellInfo()Ljava/util/List;>
<com.android.server.LocationManagerService: addGnssMeasurementsListener(Landroid/location/IGnssMeasurementsListener;Ljava/lang/String;)Z>
<android.location.LocationManager: requestSingleUpdate(Ljava/lang/String;Landroid/app/PendingIntent;)V>
<android.location.LocationManager: requestLocationUpdates(Ljava/lang/String;JFLandroid/location/LocationListener;)V>
<com.android.server.LocationManagerService: requestLocationUpdates(Landroid/location/LocationRequest;Landroid/location/ILocationListener;Landroid/app/PendingIntent;Ljava/lang/String;)V>
<android.telephony.TelephonyManager: getCellLocation()Landroid/telephony/CellLocation;>
<com.android.server.LocationManagerService: registerGnssStatusCallback(Landroid/location/IGnssStatusListener;Ljava/lang/String;)Z>
<android.location.LocationManager: addProximityAlert(DDFJLandroid/app/PendingIntent;)V>
<android.telephony.TelephonyManager: getAllCellInfo()Ljava/util/List;>
<android.location.LocationManager: registerGnssStatusCallback(Landroid/location/GnssStatus$Callback;Landroid/os/Handler;)Z>
<android.location.LocationManager: requestSingleUpdate(Landroid/location/Criteria;Landroid/location/LocationListener;Landroid/os/Looper;)V>
<android.location.LocationManager: getProviders(Z)Ljava/util/List;>
<com.android.server.LocationManagerService: sendExtraCommand(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Z>
<android.location.LocationManager: requestLocationUpdates(JFLandroid/location/Criteria;Landroid/location/LocationListener;Landroid/os/Looper;)V>
<com.android.server.LocationManagerService: getProviders(Landroid/location/Criteria;Z)Ljava/util/List;>
<com.android.server.LocationManagerService: getProviderProperties(Ljava/lang/String;)Lcom/android/internal/location/ProviderProperties;>
<com.android.server.LocationManagerService: requestGeofence(Landroid/location/LocationRequest;Landroid/location/Geofence;Landroid/app/PendingIntent;Ljava/lang/String;)V>
<com.android.server.LocationManagerService: getBestProvider(Landroid/location/Criteria;Z)Ljava/lang/String;>
<com.android.server.LocationManagerService: removeUpdates(Landroid/location/ILocationListener;Landroid/app/PendingIntent;Ljava/lang/String;)V>
<android.location.LocationManager: getLastKnownLocation(Ljava/lang/String;)Landroid/location/Location;>
<android.location.LocationManager: registerGnssStatusCallback(Landroid/location/GnssStatus$Callback;)Z>
<com.android.phone.PhoneInterfaceManager: getAllCellInfo(Ljava/lang/String;)Ljava/util/List;>
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: startScan(IZLandroid/bluetooth/le/ScanSettings;Ljava/util/List;Landroid/os/WorkSource;Ljava/util/List;Ljava/lang/String;)V>
<android.location.LocationManager: getBestProvider(Landroid/location/Criteria;Z)Ljava/lang/String;>
<com.android.server.LocationManagerService: getLastLocation(Landroid/location/LocationRequest;Ljava/lang/String;)Landroid/location/Location;>
<com.android.phone.PhoneInterfaceManager: getNeighboringCellInfo(Ljava/lang/String;)Ljava/util/List;>
<android.location.LocationManager: getProviders(Landroid/location/Criteria;Z)Ljava/util/List;>
<android.location.LocationManager: addGpsStatusListener(Landroid/location/GpsStatus$Listener;)Z>
<com.android.phone.PhoneInterfaceManager: getCellLocation(Ljava/lang/String;)Landroid/os/Bundle;>
<android.location.LocationManager: addNmeaListener(Landroid/location/OnNmeaMessageListener;)Z>
<android.location.LocationManager: requestSingleUpdate(Landroid/location/Criteria;Landroid/app/PendingIntent;)V>
<android.location.LocationManager: removeUpdates(Landroid/location/LocationListener;)V>
<android.location.LocationManager: removeUpdates(Landroid/app/PendingIntent;)V>

android.permission.KILL_BACKGROUND_PROCESSES:
<android.app.ActivityManager: killBackgroundProcesses(Ljava/lang/String;)V>
<com.android.server.am.ActivityManagerService: killAllBackgroundProcesses()V>
<com.android.server.am.ActivityManagerService: killBackgroundProcesses(Ljava/lang/String;I)V>
<android.app.ActivityManager: restartPackage(Ljava/lang/String;)V>

android.permission.ACCESS_COARSE_LOCATION:
<android.location.LocationManager: addNmeaListener(Landroid/location/GpsStatus$NmeaListener;)Z>
<com.android.server.LocationManagerService: reportLocation(Landroid/location/Location;Z)V>
<android.location.LocationManager: requestLocationUpdates(Ljava/lang/String;JFLandroid/location/LocationListener;Landroid/os/Looper;)V>
<android.location.LocationManager: getProvider(Ljava/lang/String;)Landroid/location/LocationProvider;>
<android.location.LocationManager: requestLocationUpdates(JFLandroid/location/Criteria;Landroid/app/PendingIntent;)V>
<com.android.server.LocationManagerService: addGnssNavigationMessageListener(Landroid/location/IGnssNavigationMessageListener;Ljava/lang/String;)Z>
<com.android.server.TelephonyRegistry: listenForSubscriber(ILjava/lang/String;Lcom/android/internal/telephony/IPhoneStateListener;IZ)V>
<android.location.LocationManager: addNmeaListener(Landroid/location/OnNmeaMessageListener;Landroid/os/Handler;)Z>
<android.location.LocationManager: requestLocationUpdates(Ljava/lang/String;JFLandroid/app/PendingIntent;)V>
<android.telephony.TelephonyManager: listen(Landroid/telephony/PhoneStateListener;I)V>
<android.location.LocationManager: requestSingleUpdate(Ljava/lang/String;Landroid/location/LocationListener;Landroid/os/Looper;)V>
<android.location.LocationManager: sendExtraCommand(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Z>
<com.android.server.LocationManagerService: addGnssMeasurementsListener(Landroid/location/IGnssMeasurementsListener;Ljava/lang/String;)Z>
<android.location.LocationManager: requestSingleUpdate(Ljava/lang/String;Landroid/app/PendingIntent;)V>
<android.location.LocationManager: requestLocationUpdates(Ljava/lang/String;JFLandroid/location/LocationListener;)V>
<com.android.server.LocationManagerService: requestLocationUpdates(Landroid/location/LocationRequest;Landroid/location/ILocationListener;Landroid/app/PendingIntent;Ljava/lang/String;)V>
<com.android.server.LocationManagerService: registerGnssStatusCallback(Landroid/location/IGnssStatusListener;Ljava/lang/String;)Z>
<android.location.LocationManager: addProximityAlert(DDFJLandroid/app/PendingIntent;)V>
<android.location.LocationManager: registerGnssStatusCallback(Landroid/location/GnssStatus$Callback;Landroid/os/Handler;)Z>
<android.location.LocationManager: requestSingleUpdate(Landroid/location/Criteria;Landroid/location/LocationListener;Landroid/os/Looper;)V>
<android.location.LocationManager: getProviders(Z)Ljava/util/List;>
<com.android.server.LocationManagerService: sendExtraCommand(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Z>
<android.location.LocationManager: requestLocationUpdates(JFLandroid/location/Criteria;Landroid/location/LocationListener;Landroid/os/Looper;)V>
<com.android.server.LocationManagerService: getProviders(Landroid/location/Criteria;Z)Ljava/util/List;>
<com.android.server.LocationManagerService: getProviderProperties(Ljava/lang/String;)Lcom/android/internal/location/ProviderProperties;>
<com.android.server.LocationManagerService: requestGeofence(Landroid/location/LocationRequest;Landroid/location/Geofence;Landroid/app/PendingIntent;Ljava/lang/String;)V>
<com.android.server.LocationManagerService: getBestProvider(Landroid/location/Criteria;Z)Ljava/lang/String;>
<com.android.server.LocationManagerService: removeUpdates(Landroid/location/ILocationListener;Landroid/app/PendingIntent;Ljava/lang/String;)V>
<android.location.LocationManager: getLastKnownLocation(Ljava/lang/String;)Landroid/location/Location;>
<android.location.LocationManager: registerGnssStatusCallback(Landroid/location/GnssStatus$Callback;)Z>
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: startScan(IZLandroid/bluetooth/le/ScanSettings;Ljava/util/List;Landroid/os/WorkSource;Ljava/util/List;Ljava/lang/String;)V>
<android.location.LocationManager: getBestProvider(Landroid/location/Criteria;Z)Ljava/lang/String;>
<com.android.server.LocationManagerService: getLastLocation(Landroid/location/LocationRequest;Ljava/lang/String;)Landroid/location/Location;>
<android.location.LocationManager: getProviders(Landroid/location/Criteria;Z)Ljava/util/List;>
<android.location.LocationManager: addGpsStatusListener(Landroid/location/GpsStatus$Listener;)Z>
<android.location.LocationManager: addNmeaListener(Landroid/location/OnNmeaMessageListener;)Z>
<android.location.LocationManager: requestSingleUpdate(Landroid/location/Criteria;Landroid/app/PendingIntent;)V>
<android.location.LocationManager: removeUpdates(Landroid/location/LocationListener;)V>
<android.location.LocationManager: removeUpdates(Landroid/app/PendingIntent;)V>
<com.android.server.TelephonyRegistry: listen(Ljava/lang/String;Lcom/android/internal/telephony/IPhoneStateListener;IZ)V>

android.permission.CHANGE_WIFI_STATE:
<android.net.wifi.WifiManager: saveConfiguration()Z>
<android.net.wifi.WifiManager: disableNetwork(I)Z>
<com.android.server.wifi.WifiServiceImpl: setFrequencyBand(IZ)V>
<android.net.wifi.WifiManager: startWps(Landroid/net/wifi/WpsInfo;Landroid/net/wifi/WifiManager$WpsCallback;)V>
<android.net.wifi.WifiManager: enableNetwork(IZ)Z>
<android.net.wifi.WifiManager: startScan()Z>
<com.android.server.wifi.WifiServiceImpl: disableEphemeralNetwork(Ljava/lang/String;)V>
<com.android.server.wifi.WifiServiceImpl: removeNetwork(I)Z>
<com.android.server.wifi.WifiServiceImpl: reassociate()V>
<com.android.server.wifi.WifiServiceImpl: saveConfiguration()Z>
<com.android.server.wifi.WifiServiceImpl: setWifiApConfiguration(Landroid/net/wifi/WifiConfiguration;)V>
<com.android.server.wifi.p2p.WifiP2pServiceImpl: getP2pStateMachineMessenger()Landroid/os/Messenger;>
<com.android.server.wifi.WifiServiceImpl: disableNetwork(I)Z>
<com.android.server.wifi.WifiServiceImpl: factoryReset()V>
<com.android.server.wifi.p2p.WifiP2pServiceImpl: getMessenger()Landroid/os/Messenger;>
<android.net.wifi.p2p.WifiP2pManager: initialize(Landroid/content/Context;Landroid/os/Looper;Landroid/net/wifi/p2p/WifiP2pManager$ChannelListener;)Landroid/net/wifi/p2p/WifiP2pManager$Channel;>
<com.android.server.wifi.WifiServiceImpl: setWifiApEnabled(Landroid/net/wifi/WifiConfiguration;Z)V>
<com.android.server.wifi.WifiServiceImpl: setEnableAutoJoinWhenAssociated(Z)Z>
<android.net.wifi.WifiManager: cancelWps(Landroid/net/wifi/WifiManager$WpsCallback;)V>
<android.net.wifi.WifiManager: disconnect()Z>
<android.net.wifi.WifiManager: removeNetwork(I)Z>
<com.android.server.wifi.WifiServiceImpl: disconnect()V>
<com.android.server.wifi.WifiServiceImpl: setWifiEnabled(Z)Z>
<android.net.wifi.WifiManager: reconnect()Z>
<android.net.wifi.WifiManager: reassociate()Z>
<com.android.server.wifi.WifiServiceImpl: startScan(Landroid/net/wifi/ScanSettings;Landroid/os/WorkSource;)V>
<com.android.server.wifi.WifiServiceImpl: clearBlacklist()V>
<android.net.wifi.WifiManager: setWifiEnabled(Z)Z>
<com.android.server.wifi.WifiServiceImpl: addOrUpdateNetwork(Landroid/net/wifi/WifiConfiguration;)I>
<android.net.wifi.WifiManager: updateNetwork(Landroid/net/wifi/WifiConfiguration;)I>
<com.android.server.wifi.WifiServiceImpl: reconnect()V>
<com.android.server.wifi.WifiServiceImpl: addToBlacklist(Ljava/lang/String;)V>
<android.net.wifi.WifiManager: addNetwork(Landroid/net/wifi/WifiConfiguration;)I>
<com.android.server.wifi.WifiServiceImpl: getWifiServiceMessenger()Landroid/os/Messenger;>
<com.android.server.wifi.WifiServiceImpl: enableNetwork(IZ)Z>

android.permission.ACCESS_NETWORK_STATE:
<com.android.server.ConnectivityService: getNetworkCapabilities(Landroid/net/Network;)Landroid/net/NetworkCapabilities;>
<com.android.server.net.NetworkPolicyManagerService: getRestrictBackgroundByCaller()I>
<com.android.server.ConnectivityService: getTetheredIfaces()[Ljava/lang/String;>
<android.telephony.TelephonyManager: getLine1Number()Ljava/lang/String;>
<com.android.server.ConnectivityService: getLinkProperties(Landroid/net/Network;)Landroid/net/LinkProperties;>
<com.android.server.ConnectivityService: untether(Ljava/lang/String;)I>
<com.android.server.ConnectivityService: setAcceptUnvalidated(Landroid/net/Network;ZZ)V>
<android.telephony.TelephonyManager: getSubscriberId()Ljava/lang/String;>
<android.net.ConnectivityManager: getNetworkInfo(Landroid/net/Network;)Landroid/net/NetworkInfo;>
<com.android.server.ConnectivityService: getAllNetworkInfo()[Landroid/net/NetworkInfo;>
<android.net.ConnectivityManager: getAllNetworkInfo()[Landroid/net/NetworkInfo;>
<android.telephony.TelephonyManager: getGroupIdLevel1()Ljava/lang/String;>
<com.android.server.ConnectivityService: getActiveNetwork()Landroid/net/Network;>
<android.net.ConnectivityManager: reportNetworkConnectivity(Landroid/net/Network;Z)V>
<com.android.server.ConnectivityService: getActiveLinkProperties()Landroid/net/LinkProperties;>
<com.android.server.ethernet.EthernetServiceImpl: addListener(Landroid/net/IEthernetServiceListener;)V>
<com.android.server.ConnectivityService: getAllNetworks()[Landroid/net/Network;>
<android.telephony.TelephonyManager: getDeviceId(I)Ljava/lang/String;>
<android.net.ConnectivityManager: getNetworkInfo(I)Landroid/net/NetworkInfo;>
<android.net.ConnectivityManager: getActiveNetwork()Landroid/net/Network;>
<android.net.ConnectivityManager: registerNetworkCallback(Landroid/net/NetworkRequest;Landroid/net/ConnectivityManager$NetworkCallback;)V>
<com.android.server.ConnectivityService: requestBandwidthUpdate(Landroid/net/Network;)Z>
<com.android.server.ConnectivityService: getTetherableUsbRegexs()[Ljava/lang/String;>
<android.net.ConnectivityManager: reportBadNetwork(Landroid/net/Network;)V>
<com.android.server.ConnectivityService: getDefaultNetworkCapabilitiesForUser(I)[Landroid/net/NetworkCapabilities;>
<android.net.ConnectivityManager: getLinkProperties(Landroid/net/Network;)Landroid/net/LinkProperties;>
<com.android.server.net.NetworkPolicyManagerService: getNetworkQuotaInfo(Landroid/net/NetworkState;)Landroid/net/NetworkQuotaInfo;>
<android.telephony.SmsManager: injectSmsPdu([BLjava/lang/String;Landroid/app/PendingIntent;)V>
<android.net.ConnectivityManager: requestNetwork(Landroid/net/NetworkRequest;Landroid/net/ConnectivityManager$NetworkCallback;)V>
<com.android.server.ConnectivityService: isNetworkSupported(I)Z>
<com.android.server.ConnectivityService: startLegacyVpn(Lcom/android/internal/net/VpnProfile;)V>
<com.android.server.ConnectivityService: pendingListenForNetwork(Landroid/net/NetworkCapabilities;Landroid/app/PendingIntent;)V>
<com.android.server.ConnectivityService: getAllNetworkState()[Landroid/net/NetworkState;>
<com.android.server.ConnectivityService: getActiveNetworkQuotaInfo()Landroid/net/NetworkQuotaInfo;>
<com.android.server.ConnectivityService: isActiveNetworkMetered()Z>
<android.net.ConnectivityManager: requestBandwidthUpdate(Landroid/net/Network;)Z>
<com.android.server.ConnectivityService: getActiveNetworkInfo()Landroid/net/NetworkInfo;>
<com.android.server.ConnectivityService: getLinkPropertiesForType(I)Landroid/net/LinkProperties;>
<com.android.server.ConnectivityService: getTetheringErroredIfaces()[Ljava/lang/String;>
<android.net.ConnectivityManager: isActiveNetworkMetered()Z>
<com.android.phone.PhoneInterfaceManager: getDataEnabled(I)Z>
<android.telephony.TelephonyManager: getSimState()I>
<android.net.ConnectivityManager: registerDefaultNetworkCallback(Landroid/net/ConnectivityManager$NetworkCallback;)V>
<com.android.server.ConnectivityService: pendingRequestForNetwork(Landroid/net/NetworkCapabilities;Landroid/app/PendingIntent;)Landroid/net/NetworkRequest;>
<android.net.ConnectivityManager: startUsingNetworkFeature(ILjava/lang/String;)I>
<android.telephony.TelephonyManager: getVoiceMailAlphaTag()Ljava/lang/String;>
<android.net.ConnectivityManager: getNetworkCapabilities(Landroid/net/Network;)Landroid/net/NetworkCapabilities;>
<android.telephony.gsm.SmsManager: sendDataMessage(Ljava/lang/String;Ljava/lang/String;S[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;)V>
<com.android.server.net.NetworkStatsService: getDataLayerSnapshotForUid(I)Landroid/net/NetworkStats;>
<android.telephony.PhoneNumberUtils: isVoiceMailNumber(Ljava/lang/String;)Z>
<com.android.server.ConnectivityService: listenForNetwork(Landroid/net/NetworkCapabilities;Landroid/os/Messenger;Landroid/os/IBinder;)Landroid/net/NetworkRequest;>
<com.android.server.ConnectivityService: getNetworkForType(I)Landroid/net/Network;>
<com.android.server.ConnectivityService: reportNetworkConnectivity(Landroid/net/Network;Z)V>
<com.android.server.ConnectivityService: getAllVpnInfo()[Lcom/android/internal/net/VpnInfo;>
<com.android.server.ConnectivityService: updateLockdownVpn()Z>
<android.telephony.TelephonyManager: getVoiceMailNumber()Ljava/lang/String;>
<com.android.server.ethernet.EthernetServiceImpl: isAvailable()Z>
<com.android.server.ConnectivityService: reportInetCondition(II)V>
<com.android.server.ethernet.EthernetServiceImpl: getConfiguration()Landroid/net/IpConfiguration;>
<android.telephony.TelephonyManager: getIccAuthentication(IILjava/lang/String;)Ljava/lang/String;>
<android.net.ConnectivityManager: registerNetworkCallback(Landroid/net/NetworkRequest;Landroid/app/PendingIntent;)V>
<com.android.server.ConnectivityService: setUsbTethering(Z)I>
<android.telephony.gsm.SmsManager: divideMessage(Ljava/lang/String;)Ljava/util/ArrayList;>
<com.android.server.ConnectivityService: tether(Ljava/lang/String;)I>
<android.net.ConnectivityManager: getRestrictBackgroundStatus()I>
<com.android.server.ConnectivityService: requestNetwork(Landroid/net/NetworkCapabilities;Landroid/os/Messenger;ILandroid/os/IBinder;I)Landroid/net/NetworkRequest;>
<com.android.server.ConnectivityService: getLastTetherError(Ljava/lang/String;)I>
<com.android.server.ConnectivityService: getNetworkInfo(I)Landroid/net/NetworkInfo;>
<com.android.server.ConnectivityService: getNetworkInfoForUid(Landroid/net/Network;IZ)Landroid/net/NetworkInfo;>
<android.telephony.SmsManager: sendDataMessage(Ljava/lang/String;Ljava/lang/String;S[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;)V>
<com.android.server.ConnectivityService: getTetherableIfaces()[Ljava/lang/String;>
<com.android.server.ConnectivityService: isTetheringSupported()Z>
<com.android.server.ConnectivityService: getTetherableBluetoothRegexs()[Ljava/lang/String;>
<android.telephony.TelephonyManager: getPhoneCount()I>
<com.android.server.ConnectivityService: getTetherableWifiRegexs()[Ljava/lang/String;>
<android.telephony.SmsManager: divideMessage(Ljava/lang/String;)Ljava/util/ArrayList;>
<android.net.ConnectivityManager: getActiveNetworkInfo()Landroid/net/NetworkInfo;>
<com.android.server.ethernet.EthernetServiceImpl: removeListener(Landroid/net/IEthernetServiceListener;)V>
<com.android.server.ConnectivityService: factoryReset()V>
<com.android.server.ConnectivityService: setAvoidUnvalidated(Landroid/net/Network;)V>
<com.android.server.ConnectivityService: startTethering(ILandroid/os/ResultReceiver;Z)V>
<android.telephony.TelephonyManager: getSimSerialNumber()Ljava/lang/String;>
<android.net.ConnectivityManager: getAllNetworks()[Landroid/net/Network;>
<android.net.ConnectivityManager: requestNetwork(Landroid/net/NetworkRequest;Landroid/app/PendingIntent;)V>

android.permission.GET_TASKS:
<com.android.server.am.ActivityManagerService: getRunningAppProcesses()Ljava/util/List;>
<android.app.ActivityManager: getRunningTasks(I)Ljava/util/List;>
<com.android.server.am.ActivityManagerService: getRecentTasks(III)Landroid/content/pm/ParceledListSlice;>
<com.android.server.am.ActivityManagerService: getTasks(II)Ljava/util/List;>
<android.app.ActivityManager: getRunningAppProcesses()Ljava/util/List;>
<com.android.server.am.ActivityManagerService: getRunningExternalApplications()Ljava/util/List;>
<android.app.ActivityManager: getRecentTasks(II)Ljava/util/List;>

android.permission.WAKE_LOCK:
<android.widget.VideoView: onKeyDown(ILandroid/view/KeyEvent;)Z>
<android.media.MediaPlayer: release()V>
<android.media.MediaPlayer: setWakeMode(Landroid/content/Context;I)V>
<android.media.MediaPlayer: pause()V>
<android.widget.VideoView: stopPlayback()V>
<android.net.wifi.WifiManager$WifiLock: acquire()V>
<android.media.RingtoneManager: getRingtone(Landroid/content/Context;Landroid/net/Uri;)Landroid/media/Ringtone;>
<android.media.MediaPlayer: start()V>
<android.os.PowerManager$WakeLock: release()V>
<com.android.server.power.PowerManagerService$BinderService: acquireWakeLockWithUid(Landroid/os/IBinder;ILjava/lang/String;Ljava/lang/String;I)V>
<android.widget.VideoView: setVideoURI(Landroid/net/Uri;Ljava/util/Map;)V>
<com.android.server.wifi.WifiServiceImpl: acquireWifiLock(Landroid/os/IBinder;ILjava/lang/String;Landroid/os/WorkSource;)Z>
<android.media.Ringtone: setAudioAttributes(Landroid/media/AudioAttributes;)V>
<android.net.wifi.WifiManager$WifiLock: release()V>
<android.os.PowerManager$WakeLock: release(I)V>
<com.android.server.power.PowerManagerService$BinderService: updateWakeLockUids(Landroid/os/IBinder;[I)V>
<android.net.sip.SipAudioCall: startAudio()V>
<android.media.RingtoneManager: stopPreviousRingtone()V>
<android.net.sip.SipAudioCall: close()V>
<android.widget.VideoView: suspend()V>
<android.os.PowerManager$WakeLock: acquire(J)V>
<android.media.AsyncPlayer: play(Landroid/content/Context;Landroid/net/Uri;ZI)V>
<android.media.RingtoneManager: getRingtone(I)Landroid/media/Ringtone;>
<android.media.Ringtone: setStreamType(I)V>
<android.net.sip.SipAudioCall: endCall()V>
<android.media.MediaPlayer: stop()V>
<android.widget.VideoView: setVideoURI(Landroid/net/Uri;)V>
<com.android.server.wifi.WifiServiceImpl: releaseWifiLock(Landroid/os/IBinder;)Z>
<android.widget.VideoView: pause()V>
<android.media.AsyncPlayer: stop()V>
<com.android.server.power.PowerManagerService$BinderService: releaseWakeLock(Landroid/os/IBinder;I)V>
<com.android.server.power.PowerManagerService$BinderService: acquireWakeLock(Landroid/os/IBinder;ILjava/lang/String;Ljava/lang/String;Landroid/os/WorkSource;Ljava/lang/String;)V>
<android.media.Ringtone: stop()V>
<android.media.AsyncPlayer: play(Landroid/content/Context;Landroid/net/Uri;ZLandroid/media/AudioAttributes;)V>
<android.media.MediaPlayer: reset()V>
<android.widget.VideoView: setVideoPath(Ljava/lang/String;)V>
<android.media.Ringtone: play()V>
<android.os.PowerManager$WakeLock: acquire()V>
<android.widget.VideoView: start()V>
<android.widget.VideoView: resume()V>
<android.widget.VideoView: getAudioSessionId()I>
<com.android.server.power.PowerManagerService$BinderService: updateWakeLockWorkSource(Landroid/os/IBinder;Landroid/os/WorkSource;Ljava/lang/String;)V>
<android.os.PowerManager$WakeLock: setWorkSource(Landroid/os/WorkSource;)V>

android.permission.CHANGE_NETWORK_STATE:
<com.android.server.ConnectivityService: listenForNetwork(Landroid/net/NetworkCapabilities;Landroid/os/Messenger;Landroid/os/IBinder;)Landroid/net/NetworkRequest;>
<com.android.server.ConnectivityService: requestNetwork(Landroid/net/NetworkCapabilities;Landroid/os/Messenger;ILandroid/os/IBinder;I)Landroid/net/NetworkRequest;>
<android.net.ConnectivityManager: requestRouteToHost(II)Z>
<android.net.ConnectivityManager: registerNetworkCallback(Landroid/net/NetworkRequest;Landroid/net/ConnectivityManager$NetworkCallback;)V>
<android.net.ConnectivityManager: requestNetwork(Landroid/net/NetworkRequest;Landroid/net/ConnectivityManager$NetworkCallback;)V>
<android.net.ConnectivityManager: registerDefaultNetworkCallback(Landroid/net/ConnectivityManager$NetworkCallback;)V>
<com.android.server.ConnectivityService: pendingRequestForNetwork(Landroid/net/NetworkCapabilities;Landroid/app/PendingIntent;)Landroid/net/NetworkRequest;>
<com.android.server.ConnectivityService: requestRouteToHostAddress(I[B)Z>
<android.net.ConnectivityManager: startUsingNetworkFeature(ILjava/lang/String;)I>
<android.net.ConnectivityManager: requestNetwork(Landroid/net/NetworkRequest;Landroid/app/PendingIntent;)V>

android.permission.ACCESS_WIFI_STATE:
<com.android.server.wifi.WifiServiceImpl: getPrivilegedConfiguredNetworks()Ljava/util/List;>
<android.net.wifi.WifiManager: startWps(Landroid/net/wifi/WpsInfo;Landroid/net/wifi/WifiManager$WpsCallback;)V>
<com.android.server.wifi.WifiServiceImpl: getWifiApConfiguration()Landroid/net/wifi/WifiConfiguration;>
<com.android.server.wifi.WifiServiceImpl: reportActivityInfo()Landroid/net/wifi/WifiActivityEnergyInfo;>
<com.android.server.wifi.WifiServiceImpl: getConnectionStatistics()Landroid/net/wifi/WifiConnectionStatistics;>
<com.android.server.wifi.p2p.WifiP2pServiceImpl: getP2pStateMachineMessenger()Landroid/os/Messenger;>
<com.android.server.wifi.WifiServiceImpl: getEnableAutoJoinWhenAssociated()Z>
<android.net.wifi.WifiManager: isEnhancedPowerReportingSupported()Z>
<android.net.wifi.p2p.WifiP2pManager: initialize(Landroid/content/Context;Landroid/os/Looper;Landroid/net/wifi/p2p/WifiP2pManager$ChannelListener;)Landroid/net/wifi/p2p/WifiP2pManager$Channel;>
<android.net.wifi.WifiManager: isDeviceToApRttSupported()Z>
<com.android.server.wifi.WifiServiceImpl: getAggressiveHandover()I>
<android.net.wifi.WifiManager: cancelWps(Landroid/net/wifi/WifiManager$WpsCallback;)V>
<com.android.server.wifi.WifiServiceImpl: getWifiApEnabledState()I>
<android.net.ConnectivityManager: registerNetworkCallback(Landroid/net/NetworkRequest;Landroid/net/ConnectivityManager$NetworkCallback;)V>
<android.net.wifi.WifiManager: getScanResults()Ljava/util/List;>
<com.android.server.wifi.WifiServiceImpl: getConfiguredNetworks()Ljava/util/List;>
<android.net.wifi.WifiManager: isScanAlwaysAvailable()Z>
<com.android.server.wifi.WifiServiceImpl: getConnectionInfo()Landroid/net/wifi/WifiInfo;>
<android.net.ConnectivityManager: requestNetwork(Landroid/net/NetworkRequest;Landroid/net/ConnectivityManager$NetworkCallback;)V>
<android.net.wifi.WifiManager: getDhcpInfo()Landroid/net/DhcpInfo;>
<com.android.server.wifi.WifiServiceImpl: isScanAlwaysAvailable()Z>
<android.net.wifi.WifiManager: isWifiEnabled()Z>
<com.android.server.ConnectivityService: pendingListenForNetwork(Landroid/net/NetworkCapabilities;Landroid/app/PendingIntent;)V>
<android.net.wifi.WifiManager: getConfiguredNetworks()Ljava/util/List;>
<android.app.admin.DevicePolicyManager: getWifiMacAddress(Landroid/content/ComponentName;)Ljava/lang/String;>
<android.net.wifi.WifiManager: isPreferredNetworkOffloadSupported()Z>
<com.android.server.wifi.WifiServiceImpl: getConfigFile()Ljava/lang/String;>
<com.android.server.wifi.WifiServiceImpl: getScanResults(Ljava/lang/String;)Ljava/util/List;>
<android.net.ConnectivityManager: registerDefaultNetworkCallback(Landroid/net/ConnectivityManager$NetworkCallback;)V>
<com.android.server.wifi.WifiServiceImpl: requestActivityInfo(Landroid/os/ResultReceiver;)V>
<android.net.ConnectivityManager: startUsingNetworkFeature(ILjava/lang/String;)I>
<com.android.server.wifi.WifiServiceImpl: getSupportedFeatures()I>
<com.android.server.wifi.WifiServiceImpl: enableAggressiveHandover(I)V>
<com.android.server.wifi.WifiServiceImpl: disableEphemeralNetwork(Ljava/lang/String;)V>
<android.net.wifi.WifiManager: isP2pSupported()Z>
<com.android.server.wifi.WifiServiceImpl: getDhcpInfo()Landroid/net/DhcpInfo;>
<com.android.server.ConnectivityService: listenForNetwork(Landroid/net/NetworkCapabilities;Landroid/os/Messenger;Landroid/os/IBinder;)Landroid/net/NetworkRequest;>
<com.android.server.wifi.WifiServiceImpl: getVerboseLoggingLevel()I>
<android.net.sip.SipAudioCall: startAudio()V>
<com.android.server.wifi.WifiServiceImpl: getWifiEnabledState()I>
<com.android.server.wifi.p2p.WifiP2pServiceImpl: getMessenger()Landroid/os/Messenger;>
<com.android.server.wifi.WifiServiceImpl: getAllowScansWithTraffic()I>
<android.net.wifi.WifiManager: pingSupplicant()Z>
<android.net.ConnectivityManager: registerNetworkCallback(Landroid/net/NetworkRequest;Landroid/app/PendingIntent;)V>
<com.android.server.wifi.WifiServiceImpl: getCurrentNetwork()Landroid/net/Network;>
<android.net.wifi.WifiManager: is5GHzBandSupported()Z>
<com.android.server.wifi.WifiServiceImpl: enableVerboseLogging(I)V>
<com.android.server.wifi.WifiServiceImpl: setAllowScansWithTraffic(I)V>
<com.android.server.wifi.WifiServiceImpl: getMatchingWifiConfig(Landroid/net/wifi/ScanResult;)Landroid/net/wifi/WifiConfiguration;>
<android.net.wifi.WifiManager: getConnectionInfo()Landroid/net/wifi/WifiInfo;>
<android.net.wifi.WifiManager: getWifiState()I>
<android.net.wifi.WifiManager: isTdlsSupported()Z>
<com.android.server.wifi.WifiServiceImpl: getWifiServiceMessenger()Landroid/os/Messenger;>
<com.android.server.wifi.WifiServiceImpl: pingSupplicant()Z>
<com.android.server.wifi.WifiServiceImpl: isMulticastEnabled()Z>
<com.android.server.wifi.WifiServiceImpl: getFrequencyBand()I>

android.permission.MODIFY_AUDIO_SETTINGS:
<com.android.server.audio.AudioService: startBluetoothScoVirtualCall(Landroid/os/IBinder;)V>
<com.android.server.audio.AudioService: setMode(ILandroid/os/IBinder;Ljava/lang/String;)V>
<android.media.AudioManager: setSpeakerphoneOn(Z)V>
<com.android.server.audio.AudioService: setMicrophoneMute(ZLjava/lang/String;I)V>
<android.media.AudioManager: setMode(I)V>
<android.net.sip.SipAudioCall: setSpeakerMode(Z)V>
<com.android.server.audio.AudioService: startBluetoothSco(Landroid/os/IBinder;I)V>
<android.media.AudioManager: startBluetoothSco()V>
<android.media.AudioManager: setBluetoothScoOn(Z)V>
<android.media.AudioManager: setMicrophoneMute(Z)V>
<com.android.server.audio.AudioService: setBluetoothScoOn(Z)V>
<com.android.server.audio.AudioService: setSpeakerphoneOn(Z)V>
<android.media.AudioManager: stopBluetoothSco()V>
<com.android.server.audio.AudioService: stopBluetoothSco(Landroid/os/IBinder;)V>

android.permission.SET_WALLPAPER:
<android.app.WallpaperManager: setBitmap(Landroid/graphics/Bitmap;Landroid/graphics/Rect;Z)I>
<android.test.IsolatedContext: clearWallpaper()V>
<android.app.WallpaperManager: clear()V>
<android.app.ActivityGroup: setWallpaper(Ljava/io/InputStream;)V>
<android.app.ListActivity: clearWallpaper()V>
<android.app.TabActivity: clearWallpaper()V>
<android.test.RenamingDelegatingContext: setWallpaper(Landroid/graphics/Bitmap;)V>
<android.app.Activity: clearWallpaper()V>
<android.app.NativeActivity: setWallpaper(Ljava/io/InputStream;)V>
<android.app.WallpaperManager: setResource(I)V>
<android.service.quicksettings.TileService: clearWallpaper()V>
<android.app.backup.BackupAgentHelper: setWallpaper(Landroid/graphics/Bitmap;)V>
<android.app.WallpaperManager: setStream(Ljava/io/InputStream;Landroid/graphics/Rect;ZI)I>
<android.service.voice.VoiceInteractionService: clearWallpaper()V>
<android.service.voice.VoiceInteractionService: setWallpaper(Landroid/graphics/Bitmap;)V>
<android.app.ExpandableListActivity: setWallpaper(Ljava/io/InputStream;)V>
<android.test.mock.MockApplication: clearWallpaper()V>
<android.test.IsolatedContext: setWallpaper(Landroid/graphics/Bitmap;)V>
<android.app.ListActivity: setWallpaper(Landroid/graphics/Bitmap;)V>
<com.android.server.wallpaper.WallpaperManagerService: setWallpaper(Ljava/lang/String;Ljava/lang/String;Landroid/graphics/Rect;ZLandroid/os/Bundle;ILandroid/app/IWallpaperManagerCallback;I)Landroid/os/ParcelFileDescriptor;>
<android.content.ContextWrapper: setWallpaper(Landroid/graphics/Bitmap;)V>
<android.content.ContextWrapper: clearWallpaper()V>
<android.content.MutableContextWrapper: setWallpaper(Landroid/graphics/Bitmap;)V>
<android.app.ExpandableListActivity: clearWallpaper()V>
<android.app.ListActivity: setWallpaper(Ljava/io/InputStream;)V>
<android.content.MutableContextWrapper: setWallpaper(Ljava/io/InputStream;)V>
<android.view.ContextThemeWrapper: clearWallpaper()V>
<android.view.ContextThemeWrapper: setWallpaper(Ljava/io/InputStream;)V>
<android.app.AliasActivity: setWallpaper(Ljava/io/InputStream;)V>
<android.app.WallpaperManager: setBitmap(Landroid/graphics/Bitmap;)V>
<android.app.WallpaperManager: setBitmap(Landroid/graphics/Bitmap;Landroid/graphics/Rect;ZI)I>
<android.content.ContextWrapper: setWallpaper(Ljava/io/InputStream;)V>
<android.test.IsolatedContext: setWallpaper(Ljava/io/InputStream;)V>
<android.accounts.AccountAuthenticatorActivity: clearWallpaper()V>
<android.test.RenamingDelegatingContext: setWallpaper(Ljava/io/InputStream;)V>
<android.app.WallpaperManager: setResource(II)I>
<android.net.VpnService: setWallpaper(Ljava/io/InputStream;)V>
<android.app.WallpaperManager: setStream(Ljava/io/InputStream;)V>
<android.app.NativeActivity: setWallpaper(Landroid/graphics/Bitmap;)V>
<android.app.ExpandableListActivity: setWallpaper(Landroid/graphics/Bitmap;)V>
<android.app.WallpaperManager: setStream(Ljava/io/InputStream;Landroid/graphics/Rect;Z)I>
<android.content.MutableContextWrapper: clearWallpaper()V>
<android.app.TabActivity: setWallpaper(Landroid/graphics/Bitmap;)V>
<android.app.AliasActivity: setWallpaper(Landroid/graphics/Bitmap;)V>
<android.app.Activity: setWallpaper(Ljava/io/InputStream;)V>
<android.app.WallpaperManager: clear(I)V>
<android.service.dreams.DreamService: setWallpaper(Ljava/io/InputStream;)V>
<android.accounts.AccountAuthenticatorActivity: setWallpaper(Landroid/graphics/Bitmap;)V>
<android.app.TabActivity: setWallpaper(Ljava/io/InputStream;)V>
<android.service.dreams.DreamService: clearWallpaper()V>
<com.android.server.wallpaper.WallpaperManagerService: clearWallpaper(Ljava/lang/String;II)V>
<android.service.dreams.DreamService: setWallpaper(Landroid/graphics/Bitmap;)V>
<android.net.VpnService: setWallpaper(Landroid/graphics/Bitmap;)V>
<android.service.quicksettings.TileService: setWallpaper(Landroid/graphics/Bitmap;)V>
<android.inputmethodservice.InputMethodService: setWallpaper(Landroid/graphics/Bitmap;)V>
<android.inputmethodservice.InputMethodService: setWallpaper(Ljava/io/InputStream;)V>
<android.inputmethodservice.InputMethodService: clearWallpaper()V>
<android.app.backup.BackupAgentHelper: clearWallpaper()V>
<android.net.VpnService: clearWallpaper()V>
<android.service.voice.VoiceInteractionService: setWallpaper(Ljava/io/InputStream;)V>
<android.test.mock.MockApplication: setWallpaper(Landroid/graphics/Bitmap;)V>
<android.app.backup.BackupAgentHelper: setWallpaper(Ljava/io/InputStream;)V>
<android.test.RenamingDelegatingContext: clearWallpaper()V>
<android.accounts.AccountAuthenticatorActivity: setWallpaper(Ljava/io/InputStream;)V>
<android.view.ContextThemeWrapper: setWallpaper(Landroid/graphics/Bitmap;)V>
<android.app.AliasActivity: clearWallpaper()V>
<android.app.Application: setWallpaper(Ljava/io/InputStream;)V>
<android.app.Application: clearWallpaper()V>
<android.app.Application: setWallpaper(Landroid/graphics/Bitmap;)V>
<android.app.ActivityGroup: clearWallpaper()V>
<android.test.mock.MockApplication: setWallpaper(Ljava/io/InputStream;)V>
<android.app.NativeActivity: clearWallpaper()V>
<android.service.quicksettings.TileService: setWallpaper(Ljava/io/InputStream;)V>
<android.app.ActivityGroup: setWallpaper(Landroid/graphics/Bitmap;)V>
<android.app.Activity: setWallpaper(Landroid/graphics/Bitmap;)V>

android.permission.BLUETOOTH:
<android.bluetooth.BluetoothHealth: registerSinkAppConfiguration(Ljava/lang/String;ILandroid/bluetooth/BluetoothHealthCallback;)Z>
<android.bluetooth.BluetoothManager: getConnectionState(Landroid/bluetooth/BluetoothDevice;I)I>
<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: getPriority(Landroid/bluetooth/BluetoothDevice;)I>
<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: getConnectedDevices()Ljava/util/List;>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: configHciSnoopLog(Z)Z>
<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: isConnected(Landroid/bluetooth/BluetoothDevice;)Z>
<android.bluetooth.BluetoothHeadset: sendVendorSpecificResultCode(Landroid/bluetooth/BluetoothDevice;Ljava/lang/String;Ljava/lang/String;)Z>
<android.bluetooth.BluetoothAdapter: startDiscovery()Z>
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: enableWBS()Z>
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: numHwTrackFiltersAvailable()I>
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: unregisterAppConfiguration(Landroid/bluetooth/BluetoothHealthAppConfiguration;)Z>
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: serverDisconnect(ILjava/lang/String;)V>
<com.android.bluetooth.avrcp.AvrcpControllerService$BluetoothAvrcpControllerBinder: sendGroupNavigationCmd(Landroid/bluetooth/BluetoothDevice;II)V>
<android.bluetooth.BluetoothHealth: getMainChannelFd(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;)Landroid/os/ParcelFileDescriptor;>
<android.bluetooth.BluetoothAdapter: cancelDiscovery()Z>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: createBond(Landroid/bluetooth/BluetoothDevice;I)Z>
<android.bluetooth.BluetoothGattServer: notifyCharacteristicChanged(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothGattCharacteristic;Z)Z>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: getRemoteName(Landroid/bluetooth/BluetoothDevice;)Ljava/lang/String;>
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: writeCharacteristic(ILjava/lang/String;III[B)V>
<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: setPriority(Landroid/bluetooth/BluetoothDevice;I)Z>
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: addDescriptor(ILandroid/os/ParcelUuid;I)V>
<android.media.MediaRouter$RouteGroup: requestSetVolume(I)V>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: getName()Ljava/lang/String;>
<android.bluetooth.BluetoothAdapter: getAddress()Ljava/lang/String;>
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: getHealthDevicesMatchingConnectionStates([I)Ljava/util/List;>
<android.bluetooth.BluetoothGattServer: addService(Landroid/bluetooth/BluetoothGattService;)Z>
<android.bluetooth.BluetoothDevice: createBond()Z>
<com.android.bluetooth.sap.SapService$SapBinder: getClient()Landroid/bluetooth/BluetoothDevice;>
<com.android.bluetooth.a2dpsink.A2dpSinkService$BluetoothA2dpSinkBinder: getConnectedDevices()Ljava/util/List;>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: getAddress()Ljava/lang/String;>
<com.android.bluetooth.sap.SapService$SapBinder: getPriority(Landroid/bluetooth/BluetoothDevice;)I>
<android.bluetooth.BluetoothGatt: writeCharacteristic(Landroid/bluetooth/BluetoothGattCharacteristic;)Z>
<android.bluetooth.le.BluetoothLeAdvertiser: startAdvertising(Landroid/bluetooth/le/AdvertiseSettings;Landroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/AdvertiseCallback;)V>
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: stopVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z>
<android.bluetooth.BluetoothDevice: getBondState()I>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: getRemoteType(Landroid/bluetooth/BluetoothDevice;)I>
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: connectionParameterUpdate(ILjava/lang/String;I)V>
<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: rejectCall(Landroid/bluetooth/BluetoothDevice;)Z>
<android.bluetooth.BluetoothGatt: writeDescriptor(Landroid/bluetooth/BluetoothGattDescriptor;)Z>
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: startVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z>
<android.bluetooth.BluetoothGatt: abortReliableWrite(Landroid/bluetooth/BluetoothDevice;)V>
<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: getCurrentCalls(Landroid/bluetooth/BluetoothDevice;)Ljava/util/List;>
<android.media.AudioManager: adjustStreamVolume(III)V>
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: sendVendorSpecificResultCode(Landroid/bluetooth/BluetoothDevice;Ljava/lang/String;Ljava/lang/String;)Z>
<android.bluetooth.BluetoothDevice: createInsecureRfcommSocketToServiceRecord(Ljava/util/UUID;)Landroid/bluetooth/BluetoothSocket;>
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: endServiceDeclaration(I)V>
<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: disconnect(Landroid/bluetooth/BluetoothDevice;)Z>
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: discoverServices(ILjava/lang/String;)V>
<android.bluetooth.BluetoothDevice: connectGatt(Landroid/content/Context;ZLandroid/bluetooth/BluetoothGattCallback;I)Landroid/bluetooth/BluetoothGatt;>
<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: dialMemory(Landroid/bluetooth/BluetoothDevice;I)Z>
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: isAudioOn()Z>
<android.bluetooth.BluetoothDevice: connectGatt(Landroid/content/Context;ZLandroid/bluetooth/BluetoothGattCallback;)Landroid/bluetooth/BluetoothGatt;>
<com.android.server.BluetoothManagerService: registerStateChangeCallback(Landroid/bluetooth/IBluetoothStateChangeCallback;)V>
<android.bluetooth.BluetoothSocket: connect()V>
<android.bluetooth.BluetoothGattServer: close()V>
<android.bluetooth.BluetoothGatt: beginReliableWrite()Z>
<com.android.bluetooth.avrcp.AvrcpControllerService$BluetoothAvrcpControllerBinder: getMetadata(Landroid/bluetooth/BluetoothDevice;)Landroid/media/MediaMetadata;>
<android.bluetooth.BluetoothGatt: readRemoteRssi()Z>
<android.bluetooth.BluetoothDevice: fetchUuidsWithSdp()Z>
<android.bluetooth.BluetoothHeadset: getConnectedDevices()Ljava/util/List;>
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: connectChannelToSource(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;)Z>
<com.android.bluetooth.sap.SapService$SapBinder: isConnected(Landroid/bluetooth/BluetoothDevice;)Z>
<com.android.bluetooth.sap.SapService$SapBinder: connect(Landroid/bluetooth/BluetoothDevice;)Z>
<android.bluetooth.BluetoothAdapter: getName()Ljava/lang/String;>
<com.android.bluetooth.sap.SapService$SapBinder: getConnectionState(Landroid/bluetooth/BluetoothDevice;)I>
<android.bluetooth.BluetoothHealth: getDevicesMatchingConnectionStates([I)Ljava/util/List;>
<android.bluetooth.BluetoothAdapter: isMultipleAdvertisementSupported()Z>
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: readDescriptor(ILjava/lang/String;II)V>
<android.bluetooth.BluetoothGatt: requestMtu(I)Z>
<android.bluetooth.BluetoothAdapter: getBluetoothLeAdvertiser()Landroid/bluetooth/le/BluetoothLeAdvertiser;>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: isMultiAdvertisementSupported()Z>
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: getConnectedDevices()Ljava/util/List;>
<android.bluetooth.le.BluetoothLeScanner: startScan(Ljava/util/List;Landroid/bluetooth/le/ScanSettings;Landroid/bluetooth/le/ScanCallback;)V>
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: clientDisconnect(ILjava/lang/String;)V>
<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: getDevicesMatchingConnectionStates([I)Ljava/util/List;>
<com.android.server.BluetoothManagerService: unregisterStateChangeCallback(Landroid/bluetooth/IBluetoothStateChangeCallback;)V>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: getBondState(Landroid/bluetooth/BluetoothDevice;)I>
<android.bluetooth.BluetoothHealth: unregisterAppConfiguration(Landroid/bluetooth/BluetoothHealthAppConfiguration;)Z>
<android.bluetooth.BluetoothAdapter: isDiscovering()Z>
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: beginServiceDeclaration(IIIILandroid/os/ParcelUuid;Z)V>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: getRemoteClass(Landroid/bluetooth/BluetoothDevice;)I>
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: connectAudio()Z>
<android.bluetooth.le.BluetoothLeScanner: stopScan(Landroid/bluetooth/le/ScanCallback;)V>
<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: getConnectionState(Landroid/bluetooth/BluetoothDevice;)I>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: getAdapterConnectionState()I>
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: connect(Landroid/bluetooth/BluetoothDevice;)Z>
<android.bluetooth.BluetoothGatt: requestConnectionPriority(I)Z>
<com.android.bluetooth.avrcp.AvrcpControllerService$BluetoothAvrcpControllerBinder: getConnectedDevices()Ljava/util/List;>
<android.bluetooth.BluetoothHealth: getConnectionState(Landroid/bluetooth/BluetoothDevice;)I>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: setDiscoverableTimeout(I)Z>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: isDiscovering()Z>
<android.bluetooth.BluetoothDevice: getName()Ljava/lang/String;>
<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: getLastVoiceTagNumber(Landroid/bluetooth/BluetoothDevice;)Z>
<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: startVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z>
<android.bluetooth.le.BluetoothLeAdvertiser: startAdvertising(Landroid/bluetooth/le/AdvertiseSettings;Landroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/AdvertiseCallback;)V>
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: disconnectAudio()Z>
<android.bluetooth.BluetoothHealth: disconnectChannel(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;I)Z>
<android.bluetooth.le.BluetoothLeScanner: startScan(Landroid/bluetooth/le/ScanCallback;)V>
<android.bluetooth.BluetoothHeadset: startVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z>
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: setBluetoothTethering(Z)V>
<android.bluetooth.BluetoothAdapter: closeProfileProxy(ILandroid/bluetooth/BluetoothProfile;)V>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: getConnectionState(Landroid/bluetooth/BluetoothDevice;)I>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: getBondedDevices()[Landroid/bluetooth/BluetoothDevice;>
<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: acceptCall(Landroid/bluetooth/BluetoothDevice;I)Z>
<android.bluetooth.BluetoothManager: getConnectedDevices(I)Ljava/util/List;>
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: disconnect(Landroid/bluetooth/BluetoothDevice;)Z>
<android.bluetooth.BluetoothHeadset: getConnectionState(Landroid/bluetooth/BluetoothDevice;)I>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: setScanMode(II)Z>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: sdpSearch(Landroid/bluetooth/BluetoothDevice;Landroid/os/ParcelUuid;)Z>
<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: getConnectionState(Landroid/bluetooth/BluetoothDevice;)I>
<android.media.AudioManager: setStreamVolume(III)V>
<com.android.bluetooth.sap.SapService$SapBinder: disconnect(Landroid/bluetooth/BluetoothDevice;)Z>
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: addCharacteristic(ILandroid/os/ParcelUuid;II)V>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: removeBond(Landroid/bluetooth/BluetoothDevice;)Z>
<android.bluetooth.BluetoothAdapter: startLeScan([Ljava/util/UUID;Landroid/bluetooth/BluetoothAdapter$LeScanCallback;)Z>
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: disconnectAll()V>
<com.android.bluetooth.a2dpsink.A2dpSinkService$BluetoothA2dpSinkBinder: isA2dpPlaying(Landroid/bluetooth/BluetoothDevice;)Z>
<com.android.bluetooth.a2dpsink.A2dpSinkService$BluetoothA2dpSinkBinder: getConnectionState(Landroid/bluetooth/BluetoothDevice;)I>
<android.bluetooth.BluetoothDevice: createRfcommSocketToServiceRecord(Ljava/util/UUID;)Landroid/bluetooth/BluetoothSocket;>
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: unregisterClient(I)V>
<android.bluetooth.BluetoothGatt: readDescriptor(Landroid/bluetooth/BluetoothGattDescriptor;)Z>
<com.android.bluetooth.pbapclient.PbapClientService$BluetoothPbapClientBinder: getConnectedDevices()Ljava/util/List;>
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: getConnectedDevices()Ljava/util/List;>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: getSimAccessPermission(Landroid/bluetooth/BluetoothDevice;)I>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: getScanMode()I>
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: readRemoteRssi(ILjava/lang/String;)V>
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: isAudioConnected(Landroid/bluetooth/BluetoothDevice;)Z>
<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: getConnectedDevices()Ljava/util/List;>
<android.bluetooth.BluetoothHealth: getConnectedDevices()Ljava/util/List;>
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: sendResponse(ILjava/lang/String;III[B)V>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: setPasskey(Landroid/bluetooth/BluetoothDevice;ZI[B)Z>
<android.bluetooth.BluetoothGatt: discoverServices()Z>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: isOffloadedScanBatchingSupported()Z>
<android.media.MediaRouter$RouteInfo: requestUpdateVolume(I)V>
<com.android.bluetooth.sap.SapService$SapBinder: getDevicesMatchingConnectionStates([I)Ljava/util/List;>
<android.bluetooth.BluetoothAdapter: getBluetoothLeScanner()Landroid/bluetooth/le/BluetoothLeScanner;>
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: endReliableWrite(ILjava/lang/String;Z)V>
<android.bluetooth.BluetoothGatt: readCharacteristic(Landroid/bluetooth/BluetoothGattCharacteristic;)Z>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: sendConnectionStateChange(Landroid/bluetooth/BluetoothDevice;III)V>
<android.bluetooth.BluetoothDevice: getBluetoothClass()Landroid/bluetooth/BluetoothClass;>
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: writeDescriptor(ILjava/lang/String;III[B)V>
<android.bluetooth.BluetoothHeadset: getDevicesMatchingConnectionStates([I)Ljava/util/List;>
<android.bluetooth.BluetoothAdapter: getScanMode()I>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: getProfileConnectionState(I)I>
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: getConnectedHealthDevices()Ljava/util/List;>
<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: enterPrivateMode(Landroid/bluetooth/BluetoothDevice;I)Z>
<android.bluetooth.BluetoothAdapter: stopLeScan(Landroid/bluetooth/BluetoothAdapter$LeScanCallback;)V>
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: getConnectedDevices()Ljava/util/List;>
<android.bluetooth.BluetoothGattServer: sendResponse(Landroid/bluetooth/BluetoothDevice;III[B)Z>
<android.bluetooth.BluetoothA2dp: getConnectionState(Landroid/bluetooth/BluetoothDevice;)I>
<android.media.MediaRouter$RouteGroup: requestUpdateVolume(I)V>
<com.android.bluetooth.pbapclient.PbapClientService$BluetoothPbapClientBinder: getDevicesMatchingConnectionStates([I)Ljava/util/List;>
<android.bluetooth.BluetoothGatt: connect()Z>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: getMessageAccessPermission(Landroid/bluetooth/BluetoothDevice;)I>
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: registerClient(Landroid/os/ParcelUuid;Landroid/bluetooth/IBluetoothGattCallback;)V>
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: connectChannelToSink(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;I)Z>
<android.bluetooth.BluetoothAdapter: getState()I>
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: registerServer(Landroid/os/ParcelUuid;Landroid/bluetooth/IBluetoothGattServerCallback;)V>
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: getDevicesMatchingConnectionStates([I)Ljava/util/List;>
<com.android.bluetooth.avrcp.AvrcpControllerService$BluetoothAvrcpControllerBinder: sendPassThroughCmd(Landroid/bluetooth/BluetoothDevice;II)V>
<com.android.bluetooth.sap.SapService$SapBinder: setPriority(Landroid/bluetooth/BluetoothDevice;I)Z>
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: disconnect(Landroid/bluetooth/BluetoothDevice;)Z>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: isEnabled()Z>
<android.bluetooth.BluetoothGatt: close()V>
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: unregisterServer(I)V>
<com.android.bluetooth.avrcp.AvrcpControllerService$BluetoothAvrcpControllerBinder: setPlayerApplicationSetting(Landroid/bluetooth/BluetoothAvrcpPlayerSettings;)Z>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: getUuids()[Landroid/os/ParcelUuid;>
<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: connect(Landroid/bluetooth/BluetoothDevice;)Z>
<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: getDevicesMatchingConnectionStates([I)Ljava/util/List;>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: getRemoteUuids(Landroid/bluetooth/BluetoothDevice;)[Landroid/os/ParcelUuid;>
<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: stopVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z>
<android.media.AudioManager: stopBluetoothSco()V>
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: connect(Landroid/bluetooth/BluetoothDevice;)Z>
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: readCharacteristic(ILjava/lang/String;II)V>
<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: holdCall(Landroid/bluetooth/BluetoothDevice;)Z>
<android.bluetooth.BluetoothAdapter: isOffloadedFilteringSupported()Z>
<android.bluetooth.BluetoothA2dp: getConnectedDevices()Ljava/util/List;>
<android.bluetooth.BluetoothAdapter: listenUsingInsecureRfcommWithServiceRecord(Ljava/lang/String;Ljava/util/UUID;)Landroid/bluetooth/BluetoothServerSocket;>
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: getDevicesMatchingConnectionStates([I)Ljava/util/List;>
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: isA2dpPlaying(Landroid/bluetooth/BluetoothDevice;)Z>
<android.bluetooth.BluetoothAdapter: enable()Z>
<com.android.server.BluetoothManagerService: getAddress()Ljava/lang/String;>
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: getHealthDeviceConnectionState(Landroid/bluetooth/BluetoothDevice;)I>
<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: sendDTMF(Landroid/bluetooth/BluetoothDevice;B)Z>
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: getDevicesMatchingConnectionStates([I)Ljava/util/List;>
<com.android.bluetooth.avrcp.AvrcpControllerService$BluetoothAvrcpControllerBinder: getDevicesMatchingConnectionStates([I)Ljava/util/List;>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: getDiscoverableTimeout()I>
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: disableWBS()Z>
<android.bluetooth.BluetoothAdapter: getProfileConnectionState(I)I>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: setRemoteAlias(Landroid/bluetooth/BluetoothDevice;Ljava/lang/String;)Z>
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: removeService(IIILandroid/os/ParcelUuid;)V>
<android.bluetooth.BluetoothAdapter: isOffloadedScanBatchingSupported()Z>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: createSocketChannel(ILjava/lang/String;Landroid/os/ParcelUuid;II)Landroid/os/ParcelFileDescriptor;>
<com.android.bluetooth.sap.SapService$SapBinder: getState()I>
<android.bluetooth.BluetoothAdapter: getBondedDevices()Ljava/util/Set;>
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: beginReliableWrite(ILjava/lang/String;)V>
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: getConnectedDevices()Ljava/util/List;>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: createBondOutOfBand(Landroid/bluetooth/BluetoothDevice;ILandroid/bluetooth/OobData;)Z>
<android.bluetooth.BluetoothDevice: getType()I>
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: clearServices(I)V>
<com.android.bluetooth.pbapclient.PbapClientService$BluetoothPbapClientBinder: getConnectionState(Landroid/bluetooth/BluetoothDevice;)I>
<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: explicitCallTransfer(Landroid/bluetooth/BluetoothDevice;)Z>
<android.bluetooth.BluetoothGatt: setCharacteristicNotification(Landroid/bluetooth/BluetoothGattCharacteristic;Z)Z>
<com.android.bluetooth.sap.SapService$SapBinder: getConnectedDevices()Ljava/util/List;>
<com.android.bluetooth.avrcp.AvrcpControllerService$BluetoothAvrcpControllerBinder: getPlaybackState(Landroid/bluetooth/BluetoothDevice;)Landroid/media/session/PlaybackState;>
<android.bluetooth.BluetoothGattServer: clearServices()V>
<android.bluetooth.BluetoothHeadset: isAudioConnected(Landroid/bluetooth/BluetoothDevice;)Z>
<android.bluetooth.BluetoothGatt: executeReliableWrite()Z>
<android.bluetooth.BluetoothDevice: getUuids()[Landroid/os/ParcelUuid;>
<android.bluetooth.BluetoothGatt: abortReliableWrite()V>
<android.media.AudioManager: setStreamMute(IZ)V>
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: bindResponse(IZ)V>
<android.bluetooth.BluetoothGatt: disconnect()V>
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: registerAppConfiguration(Landroid/bluetooth/BluetoothHealthAppConfiguration;Landroid/bluetooth/IBluetoothHealthCallback;)Z>
<android.media.MediaRouter$RouteInfo: requestSetVolume(I)V>
<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: terminateCall(Landroid/bluetooth/BluetoothDevice;I)Z>
<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: getCurrentAgFeatures(Landroid/bluetooth/BluetoothDevice;)Landroid/os/Bundle;>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: getPhonebookAccessPermission(Landroid/bluetooth/BluetoothDevice;)I>
<android.bluetooth.BluetoothManager: getDevicesMatchingConnectionStates(I[I)Ljava/util/List;>
<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: getClient()Landroid/bluetooth/BluetoothDevice;>
<com.android.server.BluetoothManagerService: getName()Ljava/lang/String;>
<android.bluetooth.BluetoothGattServer: connect(Landroid/bluetooth/BluetoothDevice;Z)Z>
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: registerForNotification(ILjava/lang/String;IZ)V>
<android.bluetooth.BluetoothAdapter: listenUsingRfcommWithServiceRecord(Ljava/lang/String;Ljava/util/UUID;)Landroid/bluetooth/BluetoothServerSocket;>
<android.bluetooth.BluetoothHealth: connectChannelToSource(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;)Z>
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: configureMTU(ILjava/lang/String;I)V>
<android.bluetooth.BluetoothManager: openGattServer(Landroid/content/Context;Landroid/bluetooth/BluetoothGattServerCallback;)Landroid/bluetooth/BluetoothGattServer;>
<android.bluetooth.BluetoothGattServer: removeService(Landroid/bluetooth/BluetoothGattService;)Z>
<android.bluetooth.BluetoothA2dp: isA2dpPlaying(Landroid/bluetooth/BluetoothDevice;)Z>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: isOffloadedFilteringSupported()Z>
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: getConnectionState(Landroid/bluetooth/BluetoothDevice;)I>
<com.android.bluetooth.a2dpsink.A2dpSinkService$BluetoothA2dpSinkBinder: getAudioConfig(Landroid/bluetooth/BluetoothDevice;)Landroid/bluetooth/BluetoothAudioConfig;>
<com.android.bluetooth.avrcp.AvrcpControllerService$BluetoothAvrcpControllerBinder: getPlayerSettings(Landroid/bluetooth/BluetoothDevice;)Landroid/bluetooth/BluetoothAvrcpPlayerSettings;>
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: getDevicesMatchingConnectionStates([I)Ljava/util/List;>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: getState()I>
<android.bluetooth.BluetoothGattServer: cancelConnection(Landroid/bluetooth/BluetoothDevice;)V>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: connectSocket(Landroid/bluetooth/BluetoothDevice;ILandroid/os/ParcelUuid;II)Landroid/os/ParcelFileDescriptor;>
<com.android.server.BluetoothManagerService: unregisterAdapter(Landroid/bluetooth/IBluetoothManagerCallback;)V>
<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: getState()I>
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: refreshDevice(ILjava/lang/String;)V>
<com.android.bluetooth.a2dpsink.A2dpSinkService$BluetoothA2dpSinkBinder: getDevicesMatchingConnectionStates([I)Ljava/util/List;>
<com.android.bluetooth.avrcp.AvrcpControllerService$BluetoothAvrcpControllerBinder: getConnectionState(Landroid/bluetooth/BluetoothDevice;)I>
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: disconnectChannel(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;I)Z>
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: clientConnect(ILjava/lang/String;ZI)V>
<android.bluetooth.BluetoothAdapter: getProfileProxy(Landroid/content/Context;Landroid/bluetooth/BluetoothProfile$ServiceListener;I)Z>
<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: dial(Landroid/bluetooth/BluetoothDevice;Ljava/lang/String;)Z>
<android.bluetooth.le.BluetoothLeScanner: flushPendingScanResults(Landroid/bluetooth/le/ScanCallback;)V>
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: getConnectionState(Landroid/bluetooth/BluetoothDevice;)I>
<android.bluetooth.BluetoothAdapter: setName(Ljava/lang/String;)Z>
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: getMainChannelFd(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHealthAppConfiguration;)Landroid/os/ParcelFileDescriptor;>
<android.bluetooth.BluetoothAdapter: isEnabled()Z>
<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: redial(Landroid/bluetooth/BluetoothDevice;)Z>
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: sendNotification(ILjava/lang/String;IILandroid/os/ParcelUuid;ILandroid/os/ParcelUuid;Z[B)V>
<android.bluetooth.BluetoothA2dp: getDevicesMatchingConnectionStates([I)Ljava/util/List;>
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: unregAll()V>
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: serverConnect(ILjava/lang/String;ZI)V>
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: getDevicesMatchingConnectionStates([I)Ljava/util/List;>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: fetchRemoteUuids(Landroid/bluetooth/BluetoothDevice;)Z>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: getRemoteAlias(Landroid/bluetooth/BluetoothDevice;)Ljava/lang/String;>
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: addIncludedService(IIILandroid/os/ParcelUuid;)V>
<android.bluetooth.BluetoothAdapter: startLeScan(Landroid/bluetooth/BluetoothAdapter$LeScanCallback;)Z>
<android.bluetooth.BluetoothHeadset: stopVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z>
<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: getCurrentAgEvents(Landroid/bluetooth/BluetoothDevice;)Landroid/os/Bundle;>

android.permission.READ_EXTERNAL_STORAGE:
<com.android.internal.telephony.UiccSmsController: sendDataForSubscriberWithSelfPermissions(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;I[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;)V>
<com.android.internal.telephony.UiccSmsController: sendStoredMultipartText(ILjava/lang/String;Landroid/net/Uri;Ljava/lang/String;Ljava/util/List;Ljava/util/List;)V>
<com.android.internal.telephony.UiccSmsController: sendStoredText(ILjava/lang/String;Landroid/net/Uri;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;)V>
<com.android.internal.telephony.UiccSmsController: sendTextForSubscriberWithSelfPermissions(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;Z)V>
<android.telephony.SmsManager: sendDataMessage(Ljava/lang/String;Ljava/lang/String;S[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;)V>
<android.telephony.SmsManager: sendMultipartTextMessage(Ljava/lang/String;Ljava/lang/String;Ljava/util/ArrayList;Ljava/util/ArrayList;Ljava/util/ArrayList;)V>
<android.telephony.gsm.SmsManager: sendTextMessage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;)V>
<android.telephony.gsm.SmsManager: sendDataMessage(Ljava/lang/String;Ljava/lang/String;S[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;)V>
<com.android.internal.telephony.UiccSmsController: sendTextForSubscriber(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;Z)V>
<android.telephony.gsm.SmsManager: sendMultipartTextMessage(Ljava/lang/String;Ljava/lang/String;Ljava/util/ArrayList;Ljava/util/ArrayList;Ljava/util/ArrayList;)V>
<com.android.internal.telephony.UiccSmsController: sendMultipartTextForSubscriber(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/util/List;Ljava/util/List;Z)V>
<android.telephony.SmsManager: sendTextMessage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;)V>
<android.view.inputmethod.InputMethodManager: showInputMethodAndSubtypeEnabler(Ljava/lang/String;)V>
<com.android.server.InputMethodManagerService: showInputMethodAndSubtypeEnablerFromClient(Lcom/android/internal/view/IInputMethodClient;Ljava/lang/String;)V>
<com.android.server.am.PendingIntentRecord: send(ILandroid/content/Intent;Ljava/lang/String;Landroid/content/IIntentReceiver;Ljava/lang/String;Landroid/os/Bundle;)V>
<com.android.internal.telephony.UiccSmsController: sendDataForSubscriber(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;I[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;)V>

android.permission.READ_PHONE_STATE:
<android.telephony.TelephonyManager: listen(Landroid/telephony/PhoneStateListener;I)V>
<com.android.server.TelephonyRegistry: listenForSubscriber(ILjava/lang/String;Lcom/android/internal/telephony/IPhoneStateListener;IZ)V>
<com.android.server.TelephonyRegistry: listen(Ljava/lang/String;Lcom/android/internal/telephony/IPhoneStateListener;IZ)V>

