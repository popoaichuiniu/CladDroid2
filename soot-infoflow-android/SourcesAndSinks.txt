%<android.app.Activity: android.content.Intent getIntent()> -> _SOURCE_
<android.content.Intent: java.lang.String getAction()> -> _SOURCE_
<android.content.Intent: boolean[] getBooleanArrayExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: boolean getBooleanExtra(java.lang.String, boolean)> -> _SOURCE_
<android.content.Intent: android.os.Bundle getBundleExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: byte[] getByteArrayExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: byte getByteExtra(java.lang.String, byte)> -> _SOURCE_
<android.content.Intent: java.util.Set getCategories()> -> _SOURCE_
<android.content.Intent: char[] getCharArrayExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: char getCharExtra(java.lang.String, char)> -> _SOURCE_
<android.content.Intent: java.lang.CharSequence[] getCharSequenceArrayExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: java.util.ArrayList getCharSequenceArrayListExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: java.lang.CharSequence getCharSequenceExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: android.content.ClipData getClipData()> -> _SOURCE_
<android.content.Intent: android.content.ComponentName getComponent()> -> _SOURCE_
<android.content.Intent: android.net.Uri getData()> -> _SOURCE_
<android.content.Intent: java.lang.String getDataString()> -> _SOURCE_
<android.content.Intent: double[] getDoubleArrayExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: double getDoubleExtra(java.lang.String, double)> -> _SOURCE_
<android.content.Intent: android.os.Bundle getExtras()> -> _SOURCE_
<android.content.Intent: int getFlags()> -> _SOURCE_
<android.content.Intent: float[] getFloatArrayExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: float getFloatExtra(java.lang.String, float)> -> _SOURCE_
<android.content.Intent: int[] getIntArrayExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: java.util.ArrayList getIntegerArrayListExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: android.content.Intent getIntent(java.lang.String)> -> _SOURCE_
<android.content.Intent: android.content.Intent getIntentOld(java.lang.String)> -> _SOURCE_
<android.content.Intent: int getIntExtra(java.lang.String, int)> -> _SOURCE_
<android.content.Intent: long[] getLongArrayExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: long getLongExtra(java.lang.String, long)> -> _SOURCE_
<android.content.Intent: java.lang.String getPackage()> -> _SOURCE_
<android.content.Intent: android.os.Parcelable[] getParcelableArrayExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: java.util.ArrayList getParcelableArrayListExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: android.os.Parcelable getParcelableExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: java.lang.String getScheme()> -> _SOURCE_
<android.content.Intent: android.content.Intent getSelector()> -> _SOURCE_
<android.content.Intent: java.io.Serializable getSerializableExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: short[] getShortArrayExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: short getShortExtra(java.lang.String, short)> -> _SOURCE_
<android.content.Intent: android.graphics.Rect getSourceBounds()> -> _SOURCE_
<android.content.Intent: java.lang.String[] getStringArrayExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: java.util.ArrayList getStringArrayListExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: java.lang.String getStringExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: java.lang.String getType()> -> _SOURCE_
<com.android.server.LockSettingsService: void systemReady()> -> _SINK_
<com.android.server.sip.SipService: boolean isOpened(java.lang.String,java.lang.String)> -> _SINK_
<com.android.server.LocationManagerService: boolean addGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener,java.lang.String)> -> _SINK_
<com.android.server.TelephonyRegistry: void listenForSubscriber(int,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> -> _SINK_
<com.android.server.LockSettingsService: boolean getBoolean(java.lang.String,boolean,int)> -> _SINK_
<com.android.internal.telephony.UiccSmsController: void sendTextForSubscriberWithSelfPermissions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean)> -> _SINK_
<android.net.sip.SipManager: void open(android.net.sip.SipProfile)> -> _SINK_
<android.telephony.gsm.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<android.net.sip.SipManager: void open(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.SipRegistrationListener)> -> _SINK_
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<android.view.inputmethod.InputMethodManager: void showInputMethodAndSubtypeEnabler(java.lang.String)> -> _SINK_
<com.android.server.LockSettingsService: String getString(java.lang.String,java.lang.String,int)> -> _SINK_
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.app.PendingIntent)> -> _SINK_
<com.android.internal.telephony.UiccPhoneBookController: java.util.List getAdnRecordsInEfForSubscriber(int,int)> -> _SINK_
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)> -> _SINK_
<com.android.server.LocationManagerService: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> -> _SINK_
<com.android.server.sip.SipService: void open(android.net.sip.SipProfile,java.lang.String)> -> _SINK_
<com.android.server.LockSettingsService: long getLong(java.lang.String,long,int)> -> _SINK_
<com.android.internal.telephony.UiccSmsController: void sendStoredMultipartText(int,java.lang.String,android.net.Uri,java.lang.String,java.util.List,java.util.List)> -> _SINK_
<com.android.server.sip.SipService: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener,java.lang.String)> -> _SINK_
<android.location.LocationManager: java.util.List getProviders(boolean)> -> _SINK_
<com.android.internal.telephony.UiccSmsController: boolean enableCellBroadcastRangeForSubscriber(int,int,int,int)> -> _SINK_
<com.android.phone.PhoneInterfaceManager: boolean endCall()> -> _SINK_
<com.android.server.LocationManagerService: java.util.List getProviders(android.location.Criteria,boolean)> -> _SINK_
<com.android.server.LocationManagerService: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)> -> _SINK_
<android.location.LocationManager: boolean registerGnssStatusCallback(android.location.GnssStatus$Callback)> -> _SINK_
<com.android.phone.PhoneInterfaceManager: java.util.List getAllCellInfo(java.lang.String)> -> _SINK_
<android.location.LocationManager: String getBestProvider(android.location.Criteria,boolean)> -> _SINK_
<com.android.phone.PhoneInterfaceManager: java.util.List getNeighboringCellInfo(java.lang.String)> -> _SINK_
<android.net.sip.SipManager: boolean isRegistered(java.lang.String)> -> _SINK_
<com.android.phone.PhoneInterfaceManager: boolean endCallForSubscriber(int)> -> _SINK_
<android.location.LocationManager: boolean addNmeaListener(android.location.GpsStatus$NmeaListener)> -> _SINK_
<com.android.server.MmsServiceBroker$BinderService: void sendMessage(int,java.lang.String,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent)> -> _SINK_
<com.android.server.LocationManagerService: void reportLocation(android.location.Location,boolean)> -> _SINK_
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)> -> _SINK_
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> -> _SINK_
<android.telephony.gsm.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)> -> _SINK_
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)> -> _SINK_
<com.android.server.MmsServiceBroker$BinderService: void downloadMessage(int,java.lang.String,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)> -> _SINK_
<android.net.sip.SipManager: android.net.sip.SipSession getSessionFor(android.content.Intent)> -> _SINK_
<android.telephony.TelephonyManager: java.util.List getNeighboringCellInfo()> -> _SINK_
<com.android.internal.telephony.UiccPhoneBookController: boolean updateAdnRecordsInEfBySearchForSubscriber(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.server.LocationManagerService: boolean registerGnssStatusCallback(android.location.IGnssStatusListener,java.lang.String)> -> _SINK_
<android.location.LocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> -> _SINK_
<android.location.LocationManager: boolean registerGnssStatusCallback(android.location.GnssStatus$Callback,android.os.Handler)> -> _SINK_
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)> -> _SINK_
<com.android.internal.telephony.UiccSmsController: boolean enableCellBroadcastForSubscriber(int,int,int)> -> _SINK_
<com.android.server.sip.SipService: void close(java.lang.String,java.lang.String)> -> _SINK_
<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<com.android.internal.telephony.UiccSmsController: void sendTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean)> -> _SINK_
<com.android.server.LocationManagerService: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> -> _SINK_
<com.android.server.LocationManagerService: String getBestProvider(android.location.Criteria,boolean)> -> _SINK_
<com.android.server.sip.SipService: boolean isRegistered(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.telephony.UiccSmsController: boolean disableCellBroadcastRangeForSubscriber(int,int,int,int)> -> _SINK_
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void startScan(int,boolean,android.bluetooth.le.ScanSettings,java.util.List,android.os.WorkSource,java.util.List,java.lang.String)> -> _SINK_
<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)> -> _SINK_
<com.android.internal.telephony.UiccPhoneBookController: java.util.List getAdnRecordsInEf(int)> -> _SINK_
<com.android.phone.PhoneInterfaceManager: android.os.Bundle getCellLocation(java.lang.String)> -> _SINK_
<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(android.net.sip.SipProfile,android.net.sip.SipProfile,android.net.sip.SipAudioCall$Listener,int)> -> _SINK_
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)> -> _SINK_
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)> -> _SINK_
<android.location.LocationManager: boolean addNmeaListener(android.location.OnNmeaMessageListener,android.os.Handler)> -> _SINK_
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)> -> _SINK_
<com.android.internal.telephony.UiccSmsController: java.util.List getAllMessagesFromIccEfForSubscriber(int,java.lang.String)> -> _SINK_
<android.net.sip.SipManager: android.net.sip.SipSession createSipSession(android.net.sip.SipProfile,android.net.sip.SipSession$Listener)> -> _SINK_
<com.android.internal.telephony.UiccSmsController: boolean updateMessageOnIccEfForSubscriber(int,java.lang.String,int,int,byte[])> -> _SINK_
<com.android.server.am.PendingIntentRecord: void send(int,android.content.Intent,java.lang.String,android.content.IIntentReceiver,java.lang.String,android.os.Bundle)> -> _SINK_
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> -> _SINK_
<com.android.server.LockSettingsService: boolean getSeparateProfileChallengeEnabled(int)> -> _SINK_
<com.android.internal.telephony.UiccSmsController: void sendDataForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<android.telephony.TelephonyManager: java.util.List getAllCellInfo()> -> _SINK_
<com.android.server.sip.SipService: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener,java.lang.String)> -> _SINK_
<com.android.server.LocationManagerService: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> -> _SINK_
<com.android.server.sip.SipService: android.net.sip.ISipSession getPendingSession(java.lang.String,java.lang.String)> -> _SINK_
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)> -> _SINK_
<android.net.sip.SipManager: void register(android.net.sip.SipProfile,int,android.net.sip.SipRegistrationListener)> -> _SINK_
<com.android.server.LocationManagerService: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String)> -> _SINK_
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)> -> _SINK_
<com.android.internal.telephony.UiccSmsController: void sendMultipartTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean)> -> _SINK_
<com.android.server.LocationManagerService: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)> -> _SINK_
<android.net.sip.SipManager: void unregister(android.net.sip.SipProfile,android.net.sip.SipRegistrationListener)> -> _SINK_
<com.android.internal.telephony.UiccPhoneBookController: boolean updateAdnRecordsInEfByIndexForSubscriber(int,int,java.lang.String,java.lang.String,int,java.lang.String)> -> _SINK_
<android.location.LocationManager: boolean addNmeaListener(android.location.OnNmeaMessageListener)> -> _SINK_
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)> -> _SINK_
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)> -> _SINK_
<com.android.server.TelephonyRegistry: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> -> _SINK_
<android.net.sip.SipManager: void setRegistrationListener(java.lang.String,android.net.sip.SipRegistrationListener)> -> _SINK_
<com.android.internal.telephony.UiccPhoneBookController: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> -> _SINK_
<android.telephony.gsm.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> -> _SINK_
<com.android.internal.telephony.UiccPhoneBookController: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.server.InputMethodManagerService: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)> -> _SINK_
<com.android.server.sip.SipService: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener,java.lang.String)> -> _SINK_
<com.android.internal.telephony.UiccSmsController: boolean copyMessageToIccEfForSubscriber(int,java.lang.String,int,byte[],byte[])> -> _SINK_
<com.android.server.LocationManagerService: boolean addGnssMeasurementsListener(android.location.IGnssMeasurementsListener,java.lang.String)> -> _SINK_
<android.telephony.SmsManager: void downloadMultimediaMessage(android.content.Context,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)> -> _SINK_
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()> -> _SINK_
<com.android.internal.telephony.UiccSmsController: void sendDataForSubscriberWithSelfPermissions(int,java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<com.android.server.sip.SipService: android.net.sip.SipProfile[] getListOfProfiles(java.lang.String)> -> _SINK_
<com.android.internal.telephony.UiccSmsController: void sendStoredText(int,java.lang.String,android.net.Uri,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<com.android.server.content.ContentService: java.util.List getCurrentSyncs()> -> _SINK_
<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(java.lang.String,java.lang.String,android.net.sip.SipAudioCall$Listener,int)> -> _SINK_
<android.net.sip.SipManager: android.net.sip.SipAudioCall takeAudioCall(android.content.Intent,android.net.sip.SipAudioCall$Listener)> -> _SINK_
<android.net.sip.SipManager: void close(java.lang.String)> -> _SINK_
<android.telephony.SmsManager: void sendMultimediaMessage(android.content.Context,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent)> -> _SINK_
<android.net.sip.SipManager: boolean isOpened(java.lang.String)> -> _SINK_
<com.android.phone.PhoneInterfaceManager: void call(java.lang.String,java.lang.String)> -> _SINK_
<com.android.server.content.ContentService: java.util.List getCurrentSyncsAsUser(int)> -> _SINK_
<android.location.LocationManager: boolean addGpsStatusListener(android.location.GpsStatus$Listener)> -> _SINK_
<android.location.LocationManager: void removeUpdates(android.app.PendingIntent)> -> _SINK_
<com.android.internal.telephony.UiccSmsController: boolean disableCellBroadcastForSubscriber(int,int,int)> -> _SINK_